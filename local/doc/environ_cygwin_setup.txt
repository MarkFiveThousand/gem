# =============================================================================
# NOTE: This file has not yet been groomed for public comsumption.  All the
# information required to install Cygwin is present, albeit only moderately
# well organized.
# =============================================================================

# =============================================================================
# Download and Install Cygwin
# =============================================================================
#
# Cygwin Homepage:
# https://www.cygwin.com/
#
# Direct Link to Installer:
# https://www.cygwin.com/setup-x86_64.exe


# Copy the commands below into a DOS cmd prompt to download and install Cygwin.


# Define and Create the Installation Directory.
# ---------------------------------------------
# c:\cygwin64 is the default installation directory.

set gem_fullpath_cygwin_install=c:\cygwin64
set gem_fullpath_cygwin_install_local_packages=%gem_fullpath_cygwin_install%\local_packages

mkdir %gem_fullpath_cygwin_install%
mkdir %gem_fullpath_cygwin_install_local_packages%


# Download Cygwin Installer
# -------------------------

curl -o %gem_fullpath_cygwin_install%\setup-x86_64.exe https://www.cygwin.com/setup-x86_64.exe


# Base Line installation
# ----------------------
#
# The following options are used to install our packages from the command line.
# Others are available.
#
# Command line arguments:
# https://cygwin.com/faq/faq.html#faq.setup.cli
#
# -D --download                     Download from internet
# -L --local-install                Install from local directory
# -l --local-package-dir            Local package directory
# -d --no-desktop                   Disable creation of desktop shortcut
# -q --quiet-mode                   Unattended setup mode
# -s --site                         Download site
# -B --no-admin                     Do not check for and enforce running as
#                                   Administrator
# -P --packages                     Specify packages to install
#
# Mirrors in California:
#
#    ftp://mirrors.sonic.net/cygwin
#    http://mirrors.kernel.org/sourceware/cygwin
#    http://mirrors.sonic.net/cygwin

set gem_url_site=ftp://mirrors.sonic.net/cygwin

%gem_fullpath_cygwin_install%\setup-x86_64.exe --local-install --quiet-mode --no-desktop --download --site %gem_url_site% --local-package-dir %gem_fullpath_cygwin_install_local_packages%



# =============================================================================
# Install the Packages
# =============================================================================
#
# NOTE: More packages may or may not be required.  See the section of this
# document titles "Concerns"

time
%gem_fullpath_cygwin_install%\setup-x86_64.exe --quiet-mode --packages xorg-server,xinit,xlaunch,rxvt-unicode,wget,mercurial,yad,xarchiver,swig,llvm,mingw64-x86_64-llvm,mingw64-x86_64-llvm-static,clang,mingw64-x86_64-clang,git,perl,meson,curl,cmake,cmake-gui,gettext,diffstat,patch,doxygen,patchutils,subversion,cvs,mercurial,autoconf,automake,binutils,bison,flex,gdb,libtool,make,pkgconfig,byacc,ccache,cscope,ctags,mingw64-x86_64-binutils,mingw64-x86_64-gcc-core,mingw64-x86_64-headers,mingw64-x86_64-runtime,mingw64-x86_64-gdbm,gperf
time

# IGNORE this.  It's just for my testing.
#%gem_fullpath_cygwin_install%\setup-x86_64.exe --quiet-mode --packages mingw64-x86_64-headers,mingw64-x86_64-runtime



# =============================================================================
# IMPORTANT!
# =============================================================================
# The remainder of the commands must be run in the in the Cygwin terminal.  An
# icon to launch the terminal should have been installed along with Cygwin.
# However, if one has not, due to the --no-desktop flag specified above, you
# can create a shortcut with the following target:

C:\cygwin64\bin\mintty.exe -i /Cygwin-Terminal.ico -



# =============================================================================
# Set Up Mintty Terminal
# =============================================================================
# Reference: https://code.google.com/archive/p/mintty/


cat > ~/.minttyrc << "EOF"

BoldAsFont=no
Font=Lucida Sans Typewriter
FontHeight=10

ForegroundColour=170,170,170
BackgroundColour=16,16,16
CursorColour=253,157,79

Black=0,0,0
Red=191,0,0
Green=0,191,0
Yellow=191,191,0
Blue=0,0,191
Magenta=191,0,191
Cyan=0,191,191
White=170,170,170
BoldBlack=64,64,64
BoldRed=255,64,64
BoldGreen=64,255,64
BoldYellow=255,255,64
BoldBlue=96,96,255
BoldMagenta=255,64,255
BoldCyan=64,255,255
BoldWhite=255,255,255

Transparency=off
OpaqueWhenFocused=no
ScrollbackLines=100000
ScrollMod=shift
Printer=*

EOF

# Restart the terminal.


# =============================================================================
# Download Gem
# =============================================================================

# By default, gem will be installed in your home directory under ~/gem.  If
# you'd like to change it, modify gem_fullpath_gem below.  However, portions of
# these instructions, in their current state, may not work if gem is installed
# elsewhere.

gem_fullpath_gem_parent=/home/$USER

cd ${gem_fullpath_gem_parent}

git clone https://github.com/MarkFiveThousand/gem.git


# NOTE: The clone operation will fail if you already have a gem directory.  If
# you do, you'll either need to rename your existing gem directory, or perform
# a "git pull" from within your gem directory to update it from github.




# =============================================================================
# Initialize Git
# =============================================================================
# Git Handbook: https://www.git-tower.com/learn/git/ebook/en/command-line/remote-repositories/integrating-remote-changes#start

# The following commands must be executed in the gem directory.
cd ${gem_fullpath_gem_parent}/gem

# Identify yourself to Git by setting the my_email and my_name variables below
# to your information.

gem_user_name="First Last"
gem_user_email="your@email.address"

# I use the following:
# gem_user_name="Mark Hodges"
# gem_user_email="markhodges5000@gmail.com"

git config --global user.email ${gem_user_email}
git config --global user.name ${gem_user_name}

# Direct Git to our Gem repository.
git remote rm origin
git remote add origin git@github.com:MarkFiveThousand/gem
git config master.remote origin
git config master.merge refs/heads/master


# Should you wish to change your details later on, you can manually edit
# the ~/.gitconfig file for global settings, or edit .git/config to change
# settings on a particular repo. Most simply, you can run the above commands
# again with new details.





# =============================================================================
# Enable Write Access to Gem Repository
# =============================================================================
# Source: https://www.git-tower.com/learn/git/ebook/en/command-line/advanced-topics/ssh-public-keys
# Source: https://stackoverflow.com/questions/749544/pipe-to-from-the-clipboard-in-bash-script
#
# This will require cooperation with the Git repository maintainer,
# markhodges5000@gmail.com.
#
# Run the ssh-keygen command shown below, replacing "john@example.com" with
# your own email address.

ssh-keygen -t rsa -C "your@email.address"

# The following section is mostly quoted from the above link:
#
# With the "-t" flag, we demand an "RSA" type key, which is one of the newest
# and safest types. With the "-C" flag, we provide a comment which you can
# think of as a kind of description or label for this key. Using your email
# address, e.g., lets you identify it more easily later.
# After confirming this command, you'll be asked to:
#
# (1) Enter a name for this new key. Just hit RETURN to accept the default name
# and location.
#
# (2) Provide a passphrase. Although SSH public key authentication can be used
# safely without any password, you should nonetheless enter a strong passphrase
# to enhance security even further.
#
# Now, two files will have been created for you: "id_rsa.pub" (your public key)
# and "id_rsa" (your private key). If you're on a [Linux-based system], you'll
# find these in the ".ssh" folder inside your home directory (~./ssh/).
#
# If you take a look at the actual contents of your public key file, you'll see
# something like this:

cat ~/.ssh/id_rsa.pub

# ssh-rsa AAAB3nZaC1aycAAEU+/ZdulUJoeuchOUU02/j18L7fo+ltQ0f322+Au/9yy9oaABBRCrH
# N/yo88BC0AB3nZaC1aycAAEU+/ZdulUJoeuchOUU02/j18L7fo+ltQ0f322AB3nZaC1aycAAEU+/Z
# dulUJoeuchOUU02/j18L7fo+ltQ0f322AB3nZaC1aycAAEU+/ZdulUJoeuchOUU02/j18L7fo+ltQ
# 0f322AB3nZaC1aycAAEU+/ZdulUJoeuchOUU02/j18L7fo+ltQ0f322klCi0/aEBBc02N+JJP you
# r@email.address
#
# It's this output that needs to be installed on the Git GitHub server you want
# to get access to. You'll have to provide this to the Git maintainer,
# markhodges5000@gmail.com.
#
# You have to copy the content of the public key file exactly as it is - no
# whitespace or the like is accepted. To make this as safe and easy as
# possible, you can use the following commands to have this copied to your
# clipboard:

function gem_copy_id_rsa_pub()
{
    gem_fullpath_id_rsa_pub=~/.ssh/id_rsa.pub
    if [[ ! -f ${gem_fullpath_id_rsa_pub} ]]; then
        echo "ERROR: Public key does not exist: ${gem_fullpath_id_rsa_pub}."; return
    fi
    gem_os=$(uname -s)
    if [[ ${gem_os} == "MINGW64"* ]]; then
        gem_fullpath_clip_exe=/c/Windows/System32/clip
    elif [[ ${gem_os} == "CYGWIN"* ]]; then
        gem_fullpath_clip_exe=/cygdrive/c/Windows/System32/clip
    elif [[ ${gem_os} == "Linux" ]]; then
        gem_fullpath_clip_exe="$(which xclip)"
        gem_clip_params="-selection c"
    else
        echo "ERROR: Failed to recognise os: ${gem_os}."; return
    fi
    if [[ ! -f ${gem_fullpath_clip_exe} ]]; then
        echo "ERROR: Failed to locate executable: ${gem_fullpath_clip_exe}."; return
    fi
    cat ${gem_fullpath_id_rsa_pub} | ${gem_fullpath_clip_exe} ${gem_clip_params}
}
gem_copy_id_rsa_pub


# Finally, paste the contents of the clipboard into the body of an email to the
# Git maintainer, markhodges5000@gmail.com.

# Wait for the Git maintainer to add your key to the reposotory, thereby
# allowing you to perform push operations.


# Add upstream (tracking) reference, used by argument-less git-pull and other
# commands.  It tells git fetch/git pull which branch to merge.

git push --set-upstream origin master





# =============================================================================
# .bashrc
# =============================================================================

cp ~/.bashrc ~/.bashrc_old
cat << EOF >> ~/.bashrc

# Source our definitions
gem_fullpath_gem_bash_init=~/gem/local/sbin/gem_bash_init
gem_fullpath_user_bash_init=~/gem/home/$USER/local/sbin/user_bash_init

if [[ -f \${gem_fullpath_gem_bash_init} ]]; then
    source \${gem_fullpath_gem_bash_init}
    if [[ -f \${gem_fullpath_user_bash_init} ]]; then
        source \${gem_fullpath_user_bash_init}
    else
        echo "\$BASH_SOURCE(\${LINENO}) WARNING: \${gem_fullpath_user_bash_init} not found."
    fi
else
    echo "\$BASH_SOURCE(\${LINENO}) WARNING: \${gem_fullpath_gem_bash_init} not found."
fi

EOF









# =============================================================================
# Apendix A- "groupinstall"-ed packages under Fedora linux
# =============================================================================
#
# sudo dnf -y groupinstall "Development Libraries":
# -------------------------------------------------

Last metadata expiration check: 0:31:52 ago on Fri 06 Sep 2019 07:09:53 PM PDT.

Group: Development Tools
 Description: These tools include general development tools such as git and CVS.
 Mandatory Packages:
   gettext
 Default Packages:
   diffstat
   doxygen
   git
   patch
   patchutils
   subversion
   systemtap
 Optional Packages:
   archmage
   buildbot
   bzr
   colordiff
   cvs
   cvs2cl
   cvsgraph
   cvsps
   darcs
   dejagnu
   expect
   gambas3-ide
   giggle
   git-annex
   git-cola
   git2cl
   gitg
   gtranslator
   highlight
   lcov
   manedit
   meld
   mercurial
   monotone
   mr
   nemiver
   qgit
   quilt
   rapidsvn
   rcs
   robodoc
   scanmem
   subunit
   svn2cl
   tailor
   tig
   tkcvs
   tortoisehg
   translate-toolkit
   utrac

#
# sudo dnf -y groupinstall "X Software Development":
# -------------------------------------------------
Last metadata expiration check: 0:00:00 ago on Sun 08 Sep 2019 04:58:22 PM PDT.

Group: X Software Development
 Description: These packages allow you to develop applications for the X Window System.
 Mandatory Packages:
   libICE-devel
   libX11-devel
   libXaw-devel
   libXfixes-devel
   libXt-devel
 Default Packages:
   SDL-devel
   Xaw3d-devel
   freetype-devel
   gd-devel
   giflib-devel
   libSM-devel
   libXScrnSaver-devel
   libXau-devel
   libXcomposite-devel
   libXcursor-devel
   libXdamage-devel
   libXdmcp-devel
   libXevie-devel
   libXext-devel
   libXfont-devel
   libXft-devel
   libXmu-devel
   libXrandr-devel
   libXrender-devel
   libXres-devel
   libXtst-devel
   libXvMC-devel
   libXxf86dga-devel
   libXxf86misc-devel



#
# sudo dnf -y groupinstall "C Development Tools and Libraries":
# -------------------------------------------------
Last metadata expiration check: 0:05:44 ago on Sun 08 Sep 2019 04:58:22 PM PDT.

Group: C Development Tools and Libraries
 Description: These tools include core development tools such as automake, gcc and debuggers.
 Mandatory Packages:
   autoconf
   automake
   binutils
   bison
   flex
   gcc
   gcc-c++
   gdb
   glibc-devel
   libtool
   make
   pkgconfig
   strace
 Default Packages:
   byacc
   ccache
   cscope
   ctags
   elfutils
   indent
   ltrace
   oprofile
   valgrind
 Optional Packages:
   ElectricFence
   astyle
   cbmc
   check
   cmake
   coan
   cproto
   elfinfo
   insight
   nasm
   pscan
   remake
   scons
   scorep
   splint
   trinity
   undertaker
   yasm
   zzuf



# Concerns:
#
# There are more llvm libraries available.  Do we need some of these?
#
# There are more clang packages available.
#









# =============================================================================
# Build fping
# =============================================================================
# https://www.google.com/search?q=fping+cygwin&rlz=1C1CHBF_enUS775US775&oq=fping+cygwin&aqs=chrome..69i57.3038j0j4&sourceid=chrome&ie=UTF-8














