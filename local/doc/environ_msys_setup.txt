# =============================================================================
# NOTICE: This file has not yet been groomed for public comsumption.  You're
# welcome to explore it.  However, be aware you're on your own.
# =============================================================================

# NOTICE! This document, in it's current state, is a conglomeration of two
# related documents.  This integration has yet to be completed.  The following
# document navigation aids are broken. The information you need is here.  You'll
# just have to scroll for it.  Please update this document as you progress
# through it.  Thank you.



# =============================================================================
# Table of Contents
# =============================================================================

Choose the Correct Shell
Install MSYS2 & MinGW-64
Update MSYS2 & MinGW-64 Installation
Rename user Mark to mhodges
Set Up .bash Shell
Create Share Directories
Create gem_bash_init
Create mountall
Create umountall
Install Applications & Development Tools
Clone the Remote Repo
GNU Development File System
GNU Development Build Environment

Install More GTK3+ Development Tools

Appendix A: Side note about compilers
Appendix B: Files Executed at Login
Appendix C: Boost C++ Library
Appendix D: Build XDebug for Debugging PHP Hosted in WAMP Server
Appendix E: Pacman
Appendix F: Installing a static pkg-config binary
Appendix G: Links




# =============================================================================
# Choose the Correct Shell
# =============================================================================

# We are using the msys shell.  Should we be using the mingw64 shell?  Read up
# on the differences.  My current understanding is at least part of it is
# related to command line parameters.





# =============================================================================
# Install MSYS2 & MinGW-64
# =============================================================================
#
# Msys2 Homepage: https://www.msys2.org/

# Download only the 64-bit installer.  It has both a 32-bit and 64-bit shell.
# i686 is the 32-bit version.  x86_64 is the 64-bit version.  After downloading
# and installing msys2, follow the directions in section III Updating Packages
# at the above link.  Updating packages may be run from either the 32-bit or
# 64-bit console.  No need to run it from both.






# =============================================================================
# Update MSYS2 & MinGW-64 Installation
# =============================================================================
#
# Pacman Wiki:
# https://wiki.archlinux.org/index.php/Pacman


# Update the package database and pacman:

pacman -Sy pacman

# Close MSYS2, run it again from Start menu. Update the rest with: Update the
# package database and core system packages with:

pacman -Syu

# Again, close MSYS2, run it again from Start menu. Update the rest with:

pacman -Su




# TROUBLSHOOTING:
#
# Database Lock Issues:
# ---------------------
# Source:  https://forum.manjaro.org/t/how-to-solve-the-unable-to-lock-database-or-failed-to-synchronize-any-databases-errors/3939

# If you are certain the database is not currently being accessed, you can
# delete the lock file:

rm -f /var/lib/pacman/db.lck


# pacman -Sy Not doing anything.
# ------------------------------
# Source: https://github.com/msys2/MSYS2-packages/issues/1298
#
# edit /etc/pacman.conf and uncomment the following line:
# XferCommand = /usr/bin/wget --passive-ftp -c -O %o %u
#
# I found the workaround above in this comment:
# #1022 (comment)
#
# However then I ran into another problem when running "pacman -Syu" whereby
# updating gnupg fails because the gpg-agent cannot connect. The workaround for
# this other issue is to disable update of the gnupg package by modifying
# pacman.conf as follows:
#
# IgnorePkg = gnupg
#
# Of course the above is a temporary workaround!


# FURTHER TROUBLSHOOTING:
#
# Take look at Detailed MSYS2 install guide for troubleshooting and additional
# details on how to keep your MSYS2 up-to-date. 

https://sourceforge.net/p/msys2/wiki/MSYS2%20installation/




# =============================================================================
# Rename user Mark to mhodges
# =============================================================================
# Source:
# https://sourceforge.net/p/msys2/discussion/general/thread/76612760/
#
# This step is optional.  The below procedure describes how to change the mingw
# user name.  It's the same as the Windows login by default.  Gem scripts make
# the assumption that the same user name is used for all build platforms.

# Create a passwd file:
/usr/bin/mkpasswd  >  /etc/passwd

# Rename the home dir:
mv /home/Mark /home/mhodges

# Modify the home dir portion of the user's line in /etc/passwd.
sed 's/home\/Mark/home\/mhodges/g' /etc/passwd > /etc/passwd_temp1
sed 's/Mark:/mhodges:/g' /etc/passwd_temp1 > /etc/passwd_temp2
mv /etc/passwd /etc/passwd.bak
mv /etc/passwd_temp2 /etc/passwd
rm /etc/passwd_temp1

# Restart the bash shell.



# =============================================================================
# Install Applications & Development Tools
# =============================================================================
#
# Pacman documentation:
# https://wiki.archlinux.org/index.php/pacman
#
# Here's a list of available packages:
# http://repo.msys2.org/




# -----------------------------------------------------------------------------
# Install Packages From the Repository
# -----------------------------------------------------------------------------
# Source: https://github.com/msys2/msys2/wiki/Using-packages
#
# This takes about 30 minutes.  Please update this if it changes.

# We're installing the mingw-w64-x86_64-* packages before the others.  When
# they're available, we favor the mingw-w64-x86_64-* variant.

date
pacman -Sy mingw-w64-x86_64-python3 mingw-w64-x86_64-toolchain mingw-w64-x86_64-ninja mingw-w64-x86_64-clang 
pacman -Sy base-devel p7zip zip unzip git mercurial cvs svn meson
date

# CMake doesn't get along well with msys.  CMake-gui requires Qt to be
# installed, which is ~3GB.  We're going to favor the Windows version instead.
#
# Download and install CMake under Windows (will be added to the path):
#
# https://cmake.org/download/





# More meson
# ----------
# NOTE: We would like to install meson this way.  However, glib requires meson
# version >= 0.50.0.  See if this version has been updated yet.  If it has,
# then we can remove the one in ~/gem/local/src/meson.  See below.

pacman -S meson

# Here's below.  You can always get from source.  This is what I did.  It works
# fine.  Legacy scripts may still look for it here.
#
# cd ~/gem/local/src
# git clone --depth=1  https://github.com/mesonbuild/meson.git

# IMPORTANT!
#
# We've had problems with pacman.  Some of the packages rquested have not been
# installing.  I wonder if this is related to the "no deleting the lock file"
# bug.
#
# Verify that the packages that you expected to be installed above, were
# actually installed.  I used cmake, ninja, and clang as my tests, as it was at
# the end of the dnf line.
#
# For troubleshooting see the section below (currently) titled:
# pacman -Sy Not doing anything.



# =============================================================================
# Set Up Mintty Terminal
# =============================================================================
# Reference: https://code.google.com/archive/p/mintty/

cat > .minttyrc << "EOF"

BoldAsFont=no
Font=Lucida Sans Typewriter
FontHeight=10

ForegroundColour=170,170,170
BackgroundColour=16,16,16
CursorColour=253,157,79

Black=0,0,0
Red=191,0,0
Green=0,191,0
Yellow=191,191,0
Blue=0,0,191
Magenta=191,0,191
Cyan=0,191,191
White=170,170,170
BoldBlack=64,64,64
BoldRed=255,64,64
BoldGreen=64,255,64
BoldYellow=255,255,64
BoldBlue=96,96,255
BoldMagenta=255,64,255
BoldCyan=64,255,255
BoldWhite=255,255,255

Transparency=off
OpaqueWhenFocused=no
ScrollbackLines=100000
ScrollMod=shift
Printer=*

EOF

# Restart the terminal.



# =============================================================================
# Initialize Git
# =============================================================================
# Initialize Git.
git config --global user.email "markhodges5000@gmail.com"
git config --global user.name "Mark Hodges"



git remote rm origin
git remote add origin git@github.com:MarkFiveThousand/gem
# I'm not sure what these do, or if they're necessary.
git config master.remote origin
git config master.merge refs/heads/master



# =============================================================================
# Download Gem
# =============================================================================

# By default, gem will be installed in your home directory under ~/gem.  If
# you'd like to change it, modify gem_fullpath_gem below.  However, portions of
# these instructions, in their current state, may not work if gem is installed
# elsewhere.

gem_fullpath_gem_parent=/home/$USER

cd ${gem_fullpath_gem_parent}

git clone https://github.com/MarkFiveThousand/gem.git


# NOTE: The clone operation will fail if you already have a gem directory.  If
# you do, you'll either need to rename your existing gem directory, or perform
# a "git pull" from within your gem directory to update it from github.




# =============================================================================
# .bashrc
# =============================================================================
# Append the following command to .bashrc.  Our ~/gem/sbin/gem_bash_init is
# common to all our linux-based environments.  It will set the msys & linux
# environment the way we like it.


mv ~/.bashrc ~/.bashrc.bak
cat << EOF > ~/.bashrc

#
# File: .bashrc
#
# Configure user-specific environment and startup programs
#

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi



export gem_fullpath_gem=${HOME}/gem

# Source our definitions. *FIX: Move personal preferences out of gem_bash_init.
source ${gem_fullpath_gem}/local/sbin/gem_bash_init

# Where would you like to go today?
cd ~/gem/local/src







# =============================================================================
# Pin the Terminal To the Windows Taskbar
# =============================================================================
#
# In Windows, right-click C:\msys64\msys2.exe and drag it to the taskbar.

# Set the shortcut start up to:
#
# C:\msys64\usr\bin\mintty.exe /usr/bin/env MSYSTEM=MINGW64 /usr/bin/bash --login






# =============================================================================
# Create Share Directories
# =============================================================================

# NOTE: This is deprecated.

mkdir ~/gem/mnt
mkdir ~/gem/mnt/f28v2_mhodges
mkdir ~/gem/mnt/f28v2_root
mkdir ~/gem/mnt/f29v1_mhodges
mkdir ~/gem/mnt/f29v1_root



# =============================================================================
# Create Software Development File System
# =============================================================================

# NOTE: This is deprecated.

Note: If you are going to clone the remote repo you can skip this step.  All
you must do is create the ~/projects directory.  The below is only to be
performed if *not* pulling from remote repo.  This is to be used when building
the GNU code base from scratch.

GNU packages expect a standard file structure:
http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard ,
http://en.wikipedia.org/wiki/Unix_filesystem#Conventional_directory_layout
and
http://www.gnu.org/prep/standards/html_node/Directory-Variables.html


In msys2, / is mapped to c:\msys64, and /usr is mapped to c:\msys64\usr.


# -------- OLD --------: Update this, please.

# Set up the GNU developement file structure:
# -----------------------------------------------------------------------------
NOTE: This should *follow* setting up .bashrc, since that's where $GNU_ROOT is
defined.

mkdir $GNU_ROOT
mkdir $GNU_ROOT/{build32,build64,local32,local64}
mkdir $GNU_ROOT/local{32,64}/{bin,etc,include,lib,share}
mkdir $GNU_ROOT/local{32,64}/lib/pkgconfig


Until we get our tools directory organized we will need to do the following:

NOTE: Are we going to put Ant here?  For now we will skip this.  Update this
doc if it turns out that we do need this.

TOOLS_ROOT=$PROJECTS_ROOT/tools
mkdir $PROJECTS_ROOT/tools
mkdir $TOOLS_ROOT/opt
mkdir $TOOLS_ROOT/opt/bin


NOTE: Here's a recursive directory command to view your work:

cd $GNU_ROOT && \
ls -R ~ | awk '/:$/&&f{s=$0;f=0}/:$/&&!f{sub(/:$/,"");s=$0;f=1;next}NF&&f{ print s"/"$0 }'



When a GNU program installs via pkgconfig it expects the following directories
to be present:

NOTE:
--prefix is passed to all our ./configure scripts while building GNU libraries.

Below are listed the common prefix for installation directories used in Linux.
I think this is what our *.pc (package config) files contain.

NOTE!:
How is the "prefix = /usr/local" going to work for us with the
local32 and local64 configuration?

prefix = /usr/local
datarootdir = $(prefix)/share
datadir = $(datarootdir)
exec_prefix = $(prefix)
# Where to put the executable for the command `gcc'.
bindir = $(exec_prefix)/bin
# Where to put the directories used by the compiler.
libexecdir = $(exec_prefix)/libexec
# Where to put the Info files.
infodir = $(datarootdir)/info




# =============================================================================
# fping
# =============================================================================
# We use fping in gem_bash_init to determine if a pc is up on the network prior
# to attempting to mount its shared folder.
#
# http://fping.org/
#
# Download from either source and install:
#
# Source 1:
# http://www.bdtinc.com/pub/software/network/fping300/x64%20(64%20bit)/

cp /c/Users/Mark/Downloads/Fping.exe /bin/fping.exe

# Source 2:
# http://www.softpedia.com/get/Network-Tools/IP-Tools/Fping.shtml

mkdir ~/fping && \
cp /c/Users/Mark/Downloads/fping300.zip ~/fping && \
cd ~/fping &&\
unzip fping300.zip && \
cd 'x64 (64 bit)' && \
cp Fping.exe /bin/fping.exe
# Clean up:
rm -rf ~/fping






# =============================================================================
# Create gem_bash_init
# =============================================================================

# NOTE: This is deprecated.

# Create gem_bash_init, mount, and mountall, for both user mhodges and root.  It's
# overkill for root, but gives a nice shell prompt and doesn't do any harm.
# 
# IMPORTANT!
#
# If you restored files from a backup, you already have these files.

mkdir ~/gem/local/sbin
cat << EOF > ~/gem/local/sbin/gem_bash_init
#!/bin/bash

#
# File: gem_bash_init
#
# Configure user-specific environment and startup programs.
# 

function gem_bash_init_main()
{
    # =========================================================================
    # How to run a Windows .bat file in mingw64 mintty terminal. Important for
    # building for Android under mingw64.
    # =========================================================================
    # Source: http://sourceforge.net/p/mingw/bugs/1902/
    # Source: http://ss64.com/nt/cmd.html
    # cmd //C mark.bat


    # Source global definitions
    if [[ -f /etc/bashrc ]]; then
        . /etc/bashrc    # We expect this to only happen on Linux.
    fi

    # =========================================================================
    # Path & Environment Variables
    # ==============Path===========================================================
    export PATH="/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:\${HOME}/gem/local/sbin"

    # *FIX: Move ~/sbin/* to /usr/local/sbin so everyone can use the scripts instead doing this crap!
    if [[ \$(whoami) == "root" ]]; then
        export PATH=\${PATH}:/home/mhodges/gem/local/sbin
    fi

    # Git command line needs to know which editor you use:
    export EDITOR=npp

    # File listing colors
    export LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=3;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=1;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=1;36:*.spx=01;36:*.xspf=01;36:"

    # Rainbow Prompt
    export PS1="\[\$(tput bold)\]\[\$(tput setaf 1)\][\[\$(tput setaf 3)\]\u\[\$(tput setaf 2)\]@\[\$(tput setaf 4)\]\h \[\$(tput setaf 5)\]\W\[\$(tput setaf 1)\]]\[\$(tput setaf 7)\]\\$ \[\$(tput sgr0)\]"


    # =========================================================================
    # Gem
    # =========================================================================
    export GEM_FULLPATH_LOCAL=\${HOME}/gem/local
    export PATH=\${GEM_FULLPATH_LOCAL}/bin:\${PATH}

    if [[ \$(uname -s) == "Linux" ]]; then
        export PATH=\${GEM_FULLPATH_LOCAL}/../local_x86_64-pc-linux-gnu/release/bin:\${PATH}
    elif [[ \$(uname -s) == *"MINGW64"* ]]; then
        export PATH=\${GEM_FULLPATH_LOCAL}/../local_x86_64-w64-mingw32/release/bin:\${PATH}
    fi

    # Determine the OS we are building on.
    if [[ \$(uname -m) == "x86_64" ]]; then
        if [[ \$(uname -s) == "Linux" ]]; then
            export GEM_OS_HOST_BUILD="GEM_OS_HOST_BUILD_LINUX"
        elif [[ \$(uname -s) == *"MINGW64"* ]]; then
            export GEM_OS_HOST_BUILD="GEM_OS_HOST_BUILD_MINGW"
        else
            echo "gem_bash_init(\${LINENO}) Error: Operating system \$(uname -s) is not supported."; return
        fi
    else
        echo "gem_bash_init(\${LINENO}) Error: Operating system architecture \$(uname -m) is not supported."; return
    fi


    # =========================================================================
    # Mount Shares
    # =========================================================================
    if [[ \$(whoami) != "root" ]]; then
        mountall
    fi


    # =========================================================================
    # Aliases
    # =========================================================================

    if [[ \${GEM_OS_HOST_BUILD} == GEM_OS_HOST_BUILD_MINGW ]]; then
        alias npp="/c/Program\ Files\ \(x86\)/Notepad++/notepad++.exe "
    elif [[ \${GEM_OS_HOST_BUILD} == GEM_OS_HOST_BUILD_LINUX ]]; then
        alias npp="notepadqq "
        if [[ \$(whoami) == "root" ]]; then
            alias npp="notepadqq --allow-root "
        fi
    else
        echo "gem_bash_init(\${LINENO}) Error: GEM_OS_HOST_BUILD value of /"\${GEM_OS_HOST_BUILD}/" not supported.  Aborting script." && return
    fi

    alias ls='ls -al --color=auto'
    alias npplinux="(npp /home/mhodges/mnt/vbox_mhodges/projects/docs/Linux/Linux_Notes.txt &> /dev/null &)"
    alias nppfedora="(npp /home/mhodges/mnt/vbox_mhodges/projects/docs/Linux/Fedora_25.txt &> /dev/null &)"
    alias npptodo="(npp /home/mhodges/mnt/vbox_mhodges/Desktop/ToDo.txt &> /dev/null &)"
    alias nppgem="(npp ~/sbin/gem_bash_init &> /dev/null &)"  # Only edits local version.
	alias gitpush="git push git@github.com:MarkFiveThousand/gem.git"
	alias gitpull="git pull git@github.com:MarkFiveThousand/gem.git"


    # =========================================================================
    # Android
    # =========================================================================
    if [[ \${GEM_OS_HOST_BUILD} == GEM_OS_HOST_BUILD_MINGW ]]; then

        export ANDROID_SDK=/c/Android/sdk
        export PATH="\${PATH}:\${ANDROID_SDK}/build-tools/26.0.2"

    elif [[ \${GEM_OS_HOST_BUILD} == GEM_OS_HOST_BUILD_LINUX ]]; then

        export ANDROID_SDK=~/Android/sdk

    else echo "gem_bash_init(\${LINENO}) Error: GEM_OS_HOST_BUILD value of /"\${GEM_OS_HOST_BUILD}/" not supported.  Aborting script." && return
    fi
    export PATH="\${PATH}:\${ANDROID_SDK}/tools:\${ANDROID_SDK}/platform-tools"


    # =========================================================================
    # Additional Settings For MinGW
    # =========================================================================
    if [[ \${GEM_OS_HOST_BUILD} == GEM_OS_HOST_BUILD_MINGW ]]; then

        export PATH=\${PATH}:/c/msys64/mingw64/bin
        export PATH=\${PATH}:"/c/Program Files/KDiff3"
    fi


    # =========================================================================
    # Database gem_bash_init_maintenance Support
    # =========================================================================
    export CRED_NAME_DATABASE_ADMIN=root
    export CRED_PASSWORD_DATABASE_ADMIN=xxxxxxxxx
    export CRED_PASSWORD_ROOT=xxxxxxxxx
}
gem_bash_init_main

EOF
chmod u+x ~/gem/local/sbin/gem_bash_init



# To update this from a file you need to escape $:

ESCAPE_FILE=~/gem/local/sbin/gem_bash_init
sed 's/\$/\\$/g' $ESCAPE_FILE > ${ESCAPE_FILE}_temp
npp ${ESCAPE_FILE}_temp

# Then copy it to this file.





# =============================================================================
# Create gem_mountall
# =============================================================================

# NOTE: This is deprecated.

# IMPORTANT!!!: The following will not work properly until you have run:
# source ~/gem/local/sbin/gem_bash_init  as it initializes the GEM_OS environment variable
# that makes the mountall and umountall scripts work.


mkdir ~/gem/local/sbin

cat << EOF > ~/gem/local/sbin/mountall
#
# File: \${HOME}/gem/local/sbin/mountall
#
# Mount all the user-defined drives.
#

# IMPORTANT: If you're having difficulty mounting drives your may want to
# consider using a GUI.  See:
# https://www.samba.org/samba/GUI/

# Does mhodges need to belong to the group vboxfs?  Didn't seem to help.  Wait
# off on this.
printf "I did: usermod -a -G vboxsf mhodges\n\n"

# *FIX: We must eliminate the password here!
gem_password_linux_user=<your user's password>

gem_hostname=`echo \${HOSTNAME} | tr '[A-Z]' '[a-z]'`

gem_windows_hostname=mars
gem_windows_ip_address=10.0.0.100

gem_linux1_hostname=f28v2
gem_linux1_ip_address=10.0.0.101

gem_linux2_hostname=f29v1
gem_linux2_ip_address=10.0.0.102

gem_fullpath_mnt=\${HOME}/gem/mnt

function gem_mountall_main()
{
    gem_fping_how_many=-c1
    if [[ \${gem_hostname} == "\${gem_windows_hostname}" ]]; then
        gem_fping_how_many=-n1  # fping for windows needs special treatment.
    fi

    fping \${gem_windows_ip_address} \${gem_fping_how_many} -t300 2> /dev/null 1> /dev/null ; gem_windows_is_online=\$(expr \$? == 0)
    fping  \${gem_linux1_ip_address} \${gem_fping_how_many} -t300 2> /dev/null 1> /dev/null ;  gem_linux1_is_online=\$(expr \$? == 0)
    if [[ ! -z "\${gem_linux2_ip_address}" ]]; then
        fping  \${gem_linux2_ip_address} \${gem_fping_how_many} -t300 2> /dev/null 1> /dev/null ;  gem_linux2_is_online=\$(expr \$? == 0)
    fi

    echo "gem_windows_is_online = \${gem_windows_is_online}"
    echo "gem_linux1_is_online = \${gem_linux1_is_online}"
    if [[ ! -z "\${gem_linux2_ip_address}" ]]; then
        echo "gem_linux2_is_online = \${gem_linux2_is_online}"
    fi

    gem_windows_root_not_mounted=\$(expr \$(grep -c "\${gem_windows_hostname}_root"     /proc/mounts) == 0)
    gem_windows_home_not_mounted=\$(expr \$(grep -c "\${gem_windows_hostname}_\${USER}"  /proc/mounts) == 0)
    gem_linux1_root_not_mounted=\$(expr \$(grep -c "\${LINUX1}_root"           /proc/mounts) == 0)
    gem_linux1_home_not_mounted=\$(expr \$(grep -c "\${LINUX1}_\${USER}"        /proc/mounts) == 0)
    if [[ ! -z "\${gem_linux2_ip_address}" ]]; then
        gem_linux2_root_not_mounted=\$(expr \$(grep -c "\${LINUX2}_root"       /proc/mounts) == 0)
        gem_linux2_home_not_mounted=\$(expr \$(grep -c "\${LINUX2}_\${USER}"    /proc/mounts) == 0)
    fi

    echo "Before mount:"
    echo "gem_windows_root_not_mounted = \${gem_windows_root_not_mounted}"
    echo "gem_windows_home_not_mounted = \${gem_windows_home_not_mounted}"
    echo " gem_linux1_root_not_mounted = \${gem_linux1_root_not_mounted}"
    echo " gem_linux1_home_not_mounted = \${gem_linux1_home_not_mounted}"
    if [[ ! -z "\${gem_linux2_ip_address}" ]]; then
        echo " gem_linux2_root_not_mounted = \${gem_linux2_root_not_mounted}"
        echo " gem_linux2_home_not_mounted = \${gem_linux2_home_not_mounted}"
    fi
    echo

    case \${gem_hostname} in
    (\${gem_windows_hostname}) # Running on Windows(MinGW).  Mount Linux1 and Linux 2.

        # Linux1 --------------------------------------------------------------
        if [[ \${gem_linux1_is_online} ]]; then
            if [[ \${gem_linux1_root_not_mounted} ]]; then
                mkdir -p \${gem_fullpath_mnt}/\${gem_linux1_hostname}_root
                mount -f //\${gem_linux1_hostname}/root \${gem_fullpath_mnt}/\${gem_linux1_hostname}_root
            fi
            if [[ \${gem_linux1_home_not_mounted} ]]; then
                mkdir -p \${gem_fullpath_mnt}/\${gem_linux1_hostname}_\${USER}
                mount -f //\${gem_linux1_hostname}/\${USER} \${gem_fullpath_mnt}/\${gem_linux1_hostname}_\${USER}
            fi
        else
            echo "\${gem_linux1_hostname} is offline."
        fi

        # Linux2 --------------------------------------------------------------
        if [[ ! -z "\${gem_linux2_ip_address}" ]]; then
           if [[ \${gem_linux2_is_online} ]]; then
               if [[ \${gem_linux2_root_not_mounted} ]]; then
                    mkdir -p \${gem_fullpath_mnt}/\${gem_linux2_hostname}_root
                    mount -f //\${gem_linux2_hostname}/root \${gem_fullpath_mnt}/\${gem_linux2_hostname}_root
                fi
                if [[ \${gem_linux2_home_not_mounted} ]]; then
                    mkdir -p \${gem_fullpath_mnt}/\${gem_linux2_hostname}_\${USER}
                    mount -f //\${gem_linux2_hostname}/\${USER} \${gem_fullpath_mnt}/\${gem_linux2_hostname}_\${USER}
                fi
            else
                echo "\${gem_linux2_hostname} is offline."
            fi
        fi;;

    (\${gem_linux1_hostname}.localdomain)

        # Windows -------------------------------------------------------------
        if [[ \${gem_windows_is_online} ]]; then
            if [[ \${gem_windows_root_not_mounted} ]]; then
                mkdir -p \${gem_fullpath_mnt}/\${gem_windows_hostname}_root
                sudo mount -t vboxsf -o uid=\${USER},gid=\${USER} \${gem_windows_hostname}_root \${gem_fullpath_mnt}/\${gem_windows_hostname}_root
            fi
            if [[ \${gem_windows_home_not_mounted} ]]; then
                mkdir -p \${gem_fullpath_mnt}/\${gem_windows_hostname}_\${USER}
                sudo mount -t vboxsf -o uid=\${USER},gid=\${USER} \${gem_windows_hostname}_\${USER} \${gem_fullpath_mnt}/\${gem_windows_hostname}_\${USER}
            fi
        else
            echo "\${gem_windows_hostname} is offline."
        fi

        # linux2 ---------------------------------------------------------
        if [[ ! -z "\${gem_linux2_ip_address}" ]]; then
            if [[ \${gem_linux2_is_online} -eq 1 ]]; then
                if [[ \${gem_linux2_root_not_mounted} -eq 1 ]]; then
                    mkdir -p \${gem_fullpath_mnt}/\${gem_linux2_hostname}_root
                    sudo mount -t cifs -o username=\${USER},password=\${gem_password_linux_user} //\${gem_linux2_ip_address}/root \${gem_fullpath_mnt}/\${gem_linux2_hostname}_root
                fi
                if [[ \${gem_linux2_home_not_mounted} -eq 1 ]]; then
                    mkdir -p \${gem_fullpath_mnt}/\${gem_linux2_hostname}_\${USER}
                    sudo mount -t cifs -o vers=1.0,username=\${USER},password=\${gem_password_linux_user} //\${gem_linux2_ip_address}/\${USER} \${gem_fullpath_mnt}/\${gem_linux2_hostname}_\${USER}
                fi
            else
                echo "\${gem_linux2_hostname} is offline."
            fi
        fi;;

    (\${gem_linux2_hostname}.localdomain)

        # Windows -------------------------------------------------------------
        if [[ \${gem_windows_is_online} ]]; then
            if [[ \${gem_windows_root_not_mounted} ]]; then
                sudo mount -t vboxsf -o uid=\${USER},gid=\${USER} \${gem_windows_hostname}_root \${gem_fullpath_mnt}/\${gem_windows_hostname}_root
            fi
            if [[ \${gem_windows_home_not_mounted} ]]; then
                sudo mount -t vboxsf -o uid=\${USER},gid=\${USER} \${gem_windows_hostname}_\${USER} \${gem_fullpath_mnt}/\${gem_windows_hostname}_\${USER}
            fi
        else
            echo "\${gem_windows_hostname} is offline."
        fi

        # linux1 ---------------------------------------------------------
        if [[ ! -z "\${gem_linux1_ip_address}" ]]; then
            if [[ \${gem_linux1_is_online} -eq 1 ]]; then
                if [[ \${gem_linux1_root_not_mounted} -eq 1 ]]; then
                    mkdir -p \${gem_fullpath_mnt}/\${gem_linux1_hostname}_root
                    sudo mount -t cifs -o username=\${USER},password=\${gem_password_linux_user} //\${gem_linux1_ip_address}/root \${gem_fullpath_mnt}/\${gem_linux1_hostname}_root
                fi
                if [[ \${gem_linux1_home_not_mounted} -eq 1 ]]; then
                    mkdir -p \${gem_fullpath_mnt}/\${gem_linux1_hostname}_\${USER}
                    sudo mount -t cifs -o vers=1.0,username=\${USER},password=\${gem_password_linux_user} //\${gem_linux1_ip_address}/\${USER} \${gem_fullpath_mnt}/\${gem_linux1_hostname}_\${USER}
                fi
            else
                echo "\${gem_linux1_hostname} is offline."
            fi
        fi;;

    *)
        echo "Error in \$0(\${LINENO}).  Case not handled.  Aborting script." && return
    esac
}
gem_mountall_main

EOF
chmod u+x ~/gem/local/sbin/mountall



# To update this from a file you need to escape $:

ESCAPE_FILE=~/gem/local/sbin/mountall
sed 's/\$/\\$/g' $ESCAPE_FILE > ${ESCAPE_FILE}_temp
npp ${ESCAPE_FILE}_temp

# Then copy it to this file.




# =============================================================================
# Create gem_umountall
# =============================================================================

# NOTE: This is deprecated.

cat << EOF > ~/gem/local/sbin/umountall
#
# File: \${HOME}/gem/local/sbin/umountall
#
# Unmount all the user-defined drives.
#

gem_hostname=`echo \${HOSTNAME} | tr '[A-Z]' '[a-z]'`
gem_windows_hostname=mars
gem_linux1_hostname=f28v2
gem_linux2_hostname=


function gem_unmount_gem_share_name()
{
    gem_share_name=\${1}

    if [ \${gem_hostname} != "\${gem_windows_hostname}" ]; then
        gem_options_umount="-f"         # Linux-specific settings.
        gem_sudo="sudo"
    fi

    gem_counter=0
    while [ \$((gem_counter++)) -lt 500 ] && [ \$(grep -c \${gem_share_name} /proc/mounts) -ne 0 ]; do
        \${gem_sudo} umount \${gem_options_umount} \${gem_share_name} > /dev/null 2>&1
        gem_result=\$?
        if [ \${gem_result} -eq 32 ]; then
            if [ \$(expr \${gem_counter} % 100) == 0 ]; then
                echo "gem_share_name \${gem_share_name} is busy.  Retrying..."
                sleep 0
            fi
        elif [ \${gem_result} -ne 0 ]; then
            echo "Failed to unmount \${gem_share_name}.  Return code \${gem_result}."
        else
            # Successfully umounted.  However, the directory may take a little bit
            # longer to become non-busy.  rmdir below will occasionally fail. We need to
            # exit out of the while loop at this point, then spin for rmdir success.
            rmdir \${gem_share_name}
#           gem_result=\$?
#           echo "gem_result=\${gem_result}"
            echo "Unmounted \${gem_share_name}."
        fi
    done
#   echo "gem_counter = \${gem_counter}"
    if [ \$(grep -c \${gem_share_name} /proc/mounts) -ne 0 ]; then
        echo "Failed to umount \${gem_share_name}."
    fi
}

function gem_umountall_main()
{
    case \${gem_hostname} in
    (\${gem_windows_hostname})
        gem_unmount_gem_share_name ~/mnt/\${gem_linux1_hostname}_root
        gem_unmount_gem_share_name ~/mnt/\${gem_linux1_hostname}_\${USER}
        gem_unmount_gem_share_name ~/mnt/\${gem_linux2_hostname}_root
        gem_unmount_gem_share_name ~/mnt/\${gem_linux2_hostname}_\${USER}
        ;;
    (\${gem_linux1_hostname}.localdomain)
        gem_unmount_gem_share_name ~/mnt/\${gem_windows_hostname}_root
        gem_unmount_gem_share_name ~/mnt/\${gem_windows_hostname}_\${USER}
        gem_unmount_gem_share_name ~/mnt/\${gem_linux2_hostname}_root
        gem_unmount_gem_share_name ~/mnt/\${gem_linux2_hostname}_\${USER}
        ;;
    (\${gem_linux2_hostname}.localdomain)
        gem_unmount_gem_share_name ~/mnt/\${gem_windows_hostname}_root
        gem_unmount_gem_share_name ~/mnt/\${gem_windows_hostname}_\${USER}
        gem_unmount_gem_share_name ~/mnt/\${gem_linux1_hostname}_root
        gem_unmount_gem_share_name ~/mnt/\${gem_linux1_hostname}_\${USER}
        ;;
    *)
        echo "\$0(\${LINENO}) Error: Case not handled.  Aborting script." && return
    esac
}
gem_umountall_main

EOF
chmod u+x ~/gem/local/sbin/umountall



# To update this from a file you need to escape $:

ESCAPE_FILE=~/gem/local/sbin/umountall
sed 's/\$/\\$/g' $ESCAPE_FILE > ${ESCAPE_FILE}_temp
npp ${ESCAPE_FILE}_temp

# Then copy it to this file.




# =============================================================================
# Install kdiff3
# =============================================================================
#
# Download and install:
#
# https://sourceforge.net/projects/kdiff3/files/







# =============================================================================
# GNU Development Build Environment
# =============================================================================

# NOTE: This is deprecated.

Note: If you cloned the remote repo you can skip this step.

All you must do is create the ~/projects directory.  HOWEVER, PLEASE UPDATE
THIS DOCUMENTATION IF THERE ARE ANY DIFFERENCES WITH THE REPO.

NOTE:
Make sure our new xx-bit-independant XXX_profile.local works for both 32- and
64-windows version.


*** WINDOWS ***

cat > $GNU_ROOT/local/etc/WIN_profile.local << "EOF"

<insert your updated WIN_profile.local contents here>

EOF


*** LINUX ***

!! WATCH OUT FOR EDITER-INSERTED CARRAIGE RETURNS.  THEY MUST BE REMOVED.

cat > $GNU_ROOT/local/etc/LINUX_profile.local << "EOF"

<insert your updated LINUX_profile.local contents here>

EOF


Restart the shell.



# =============================================================================
# External Links
# =============================================================================
#
# Pacman documentation:
# https://wiki.archlinux.org/index.php/pacman
#
# Here's a list of packages:
# http://repo.msys2.org/
#
# Remove a Package:
# -----------------
# Many removal options are available:
# Source: https://wiki.archlinux.org/index.php/pacman#Removing_packages
#
# pacman -R <package name>




# =============================================================================
# Appendix: Packages Installed With Development Tools (OUT OF DATE -2019_07_02)
# =============================================================================
#
# mingw-w64-x86_64-toolchain
# -----------------------------------------------------------------------------
mingw-w64-x86_64-bzip2-1.0.6-6
mingw-w64-x86_64-ca-certificates-20180409-1
mingw-w64-x86_64-expat-2.2.6-1
mingw-w64-x86_64-gettext-0.19.8.1-7
mingw-w64-x86_64-gmp-6.1.2-1
mingw-w64-x86_64-isl-0.19-1  mingw-w64-x86_64-libffi-3.2.1-4
mingw-w64-x86_64-libiconv-1.15-3
mingw-w64-x86_64-libsystre-1.0.1-4
mingw-w64-x86_64-libtasn1-4.13-1
mingw-w64-x86_64-libtre-git-r128.6fb7206-2
mingw-w64-x86_64-mpc-1.1.0-1
mingw-w64-x86_64-mpdecimal-2.4.2-1
mingw-w64-x86_64-mpfr-4.0.2-2
mingw-w64-x86_64-ncurses-6.1.20180908-1
mingw-w64-x86_64-openssl-1.1.1.b-1
mingw-w64-x86_64-p11-kit-0.23.15-1
mingw-w64-x86_64-python3-3.7.2-2
mingw-w64-x86_64-readline-8.0.000-1
mingw-w64-x86_64-sqlite3-3.27.2-2
mingw-w64-x86_64-tcl-8.6.9-2
mingw-w64-x86_64-termcap-1.3.1-3
mingw-w64-x86_64-tk-8.6.9.1-1
mingw-w64-x86_64-windows-default-manifest-6.4-3
mingw-w64-x86_64-xz-5.2.4-1
mingw-w64-x86_64-zlib-1.2.11-5
mingw-w64-x86_64-binutils-2.30-5
mingw-w64-x86_64-crt-git-7.0.0.5333.8e90a421-1
mingw-w64-x86_64-gcc-8.3.0-2
mingw-w64-x86_64-gcc-ada-8.3.0-2
mingw-w64-x86_64-gcc-fortran-8.3.0-2
mingw-w64-x86_64-gcc-libgfortran-8.3.0-2
mingw-w64-x86_64-gcc-libs-8.3.0-2
mingw-w64-x86_64-gcc-objc-8.3.0-2
mingw-w64-x86_64-gdb-8.2.1-2
mingw-w64-x86_64-headers-git-7.0.0.5333.8e90a421-1
mingw-w64-x86_64-libmangle-git-7.0.0.5230.69c8fad6-1
mingw-w64-x86_64-libwinpthread-git-7.0.0.5325.11a5459d-1
mingw-w64-x86_64-make-4.2.1-2
mingw-w64-x86_64-pkg-config-0.29.2-1
mingw-w64-x86_64-tools-git-7.0.0.5324.fde585a1-1
mingw-w64-x86_64-winpthreads-git-7.0.0.5325.11a5459d-1
mingw-w64-x86_64-winstorecompat-git-7.0.0.5324.fde585a1-1

# base-devel
# -----------------------------------------------------------------------------
db-5.3.28-2
docbook-xml-4.5-2
docbook-xsl-1.79.2-1
expat-2.2.6-1
gdbm-1.18.1-1
libatomic_ops-7.6.8-1
libgc-7.6.8-1
libgdbm-1.18.1-1
libguile-2.2.4-2
libiconv-devel-1.15-1
libltdl-2.4.6-6
libpipeline-1.5.1-1
perl-Locale-Gettext-1.07-3
perl-Module-Build-0.4224-1
perl-Test-Pod-1.52-1
perl-XML-Parser-2.44-4
perl-YAML-Syck-1.31-1
perl-inc-latest-0.500-1
python2-2.7.15-3
tar-1.32-1
asciidoc-8.6.10-1
autoconf-2.69-5
autoconf2.13-2.13-2
autogen-5.18.16-1
automake-wrapper-11-1
automake1.10-1.10.3-3
automake1.11-1.11.6-3
automake1.12-1.12.6-3
automake1.13-1.13.4-4
automake1.14-1.14.1-3
automake1.15-1.15.1-1
automake1.16-1.16.1-1
automake1.6-1.6.3-2
automake1.7-1.7.9-2
automake1.8-1.8.5-3
automake1.9-1.9.6-2
bison-3.3.2-1
diffstat-1.61-1
diffutils-3.7-1
dos2unix-7.4.0-1
file-5.36-1
flex-2.6.4-1
gawk-4.2.1-2
gdb-7.12.1-1
gettext-0.19.8.1-1
gettext-devel-0.19.8.1-1
gperf-3.1-1
grep-3.0-2
groff-1.22.3-1
help2man-1.47.8-1
intltool-0.51.0-2
lemon-3.21.0-1
libtool-2.4.6-6
libunrar-5.7.3-1
libunrar-devel-5.7.3-1
m4-1.4.18-2
make-4.2.1-1
man-db-2.8.5-1
pacman-5.1.2-2
pactoys-git-r2.07ca37f-1
patch-2.7.6-1
patchutils-0.3.4-1
perl-5.28.1-2
pkg-config-0.29.2-1
pkgfile-19-1
quilt-0.65-2
rcs-5.9.4-2
scons-3.0.1-1
sed-4.7-1
swig-3.0.12-1
texinfo-6.5-2
texinfo-tex-6.5-2
ttyrec-1.0.8-2
unrar-5.7.3-1
wget-1.20.1-2
xmlto-0.0.28-2

# mingw-w64-x86_64-clang
# -----------------------------------------------------------------------------
mingw-w64-x86_64-llvm-8.0.0-1
mingw-w64-x86_64-z3-4.8.4-1
mingw-w64-x86_64-clang-8.0.0-1

# mingw-w64-x86_64-ninja
# -----------------------------------------------------------------------------
# mingw-w64-x86_64-ninja-1.9.0-1

# git mercurial cvs svn
# -----------------------------------------------------------------------------
apr-1.6.5-1
apr-util-1.6.1-1
heimdal-7.5.0-3
libsasl-2.1.27-1
libserf-1.3.9-4
openssh-7.9p1-2
perl-Authen-SASL-2.16-2
perl-Convert-BinHex-1.125-1
perl-Encode-Locale-1.05-1
perl-Error-0.17027-1
perl-File-Listing-6.04-2
perl-HTML-Parser-3.72-3
perl-HTML-Tagset-3.20-2
perl-HTTP-Cookies-6.04-1
perl-HTTP-Daemon-6.01-2
perl-HTTP-Date-6.02-2
perl-HTTP-Message-6.18-1
perl-HTTP-Negotiate-6.01-2
perl-IO-Socket-SSL-2.060-1
perl-IO-stringy-2.111-1
perl-LWP-MediaTypes-6.02-2
perl-MIME-tools-5.509-1
perl-MailTools-2.20-1
perl-Net-HTTP-6.18-1
perl-Net-SMTP-SSL-1.04-1
perl-Net-SSLeay-1.85-2
perl-TermReadKey-2.37-3
perl-TimeDate-2.30-2
perl-Try-Tiny-0.30-1
perl-URI-1.76-1
perl-WWW-RobotRules-6.02-2
perl-libwww-6.36-1
vim-8.1.0877-1
cvs-1.11.23-3
git-2.21.0-1
mercurial-4.9-1
subversion-1.11.1-1

# ruby
# -----------------------------------------------------------------------------
libyaml-0.2.1-1
ruby-2.6.1-1

# cmake
# -----------------------------------------------------------------------------
jsoncpp-1.8.4-1
librhash-1.3.8-1
libuv-1.26.0-1
cmake-3.13.2-1



# =============================================================================
# Appendix A: Side Note About Mingw Compilers
# =============================================================================
# This seems to no longer be relavent.  Maybe it was for msys(1), but not for
# msys2.
#
# IMPORTANT!  The following diagram is from a different installation of the
# compilers.  Do the compilers that we're installing use posix or win32
# threads?  And what about the debugging format?  Maybe this can be determined
# with a flag to the compiler...  I just found a link that talks about posix
# stuff.  I haven't read it yet: https://sourceforge.net/p/msys2/wiki/MSYS2%20introduction/
#
# IMPORTANT!  From the above link I see that msys2 is posix-compliant, but what
# kind of C++ exceptions does it use?
#
# HOST              C++ EXCEPTIONS       G++ THREADING MODEL
#
# i686      ------- DWARF -------------- Win32
#              |                  |
#              |                  +----- Posix (I got this one)
#              |
#              +--- SJLJ --------------- Win32
#                                 |
#                                 +----- Posix
# 
# x86_64    ------- SEH ---------------- Win32
#              |                  |
#              |                  +----- Posix (I got this one)
#              |
#              +--- SJLJ --------------- Win32
#                                 |
#                                 +----- Posix




# =============================================================================
# Appendix B: Files Executed at Login
# =============================================================================
# Last updated: 2/15/2016, copy-and-pasted from: 
# FYI:
# Excellent resource:
# http://www.hypexr.org/bash_tutorial.php
#
# http://www.thegeekstuff.com/2008/10/execution-sequence-for-bash_profile-bashrc-bash_login-profile-and-bash_logout/
#
# This is the order files are executed during startup:
# /etc/profile
# /etc/profile.d/*.sh	All the .sh files are executed.
# ~/.bash_profile		Executed only when you log in to the system.
# ~/.bashrc				Executed every time you start a subshell.
# /etc/bashrc
#
# IMPORTANT: Bash allows 2 synonyms for .bash_profile : .bash_login and
# .profile.  These are derived from the C shell's file named .login and from the
# Bourne shell and Korn shell files named .profile. Only one of these files is
# read when you log in. If .bash_profile isn't there, Bash will look for
# .bash_login. If that is missing too, it will look for .profile. 
#
# .bash_profile is read and executed only when you start a login shell (that
# is, when you log in to the system). If you start a subshell (a new shell) by
# typing bash at the command prompt, it will read commands from .bashrc. This
# allows you to separate commands needed at login from those needed when
# invoking a subshell. However, most people want to have the same commands run
# regardless of whether it is a login shell or a subshell. This can be done by
# using the source command from within .bash_profile to execute .bashrc. You
# would then simply place all the commands in ~/.bashrc.






# =============================================================================
# Appendix C: Boost C++ Library
# =============================================================================
A document Build_Boost.txt is in our docs folder.  It describes how to

Identify the latest version:
http://www.boost.org

cd ${GNU_LOCALBUILDDIR}
wget -c http://sourceforge.net/projects/boost/files/boost/1.55.0/boost_1_55_0.tar.bz2/download
# NOTE: tar will take a very long time to complete.
tar xjf boost_1_55_0.tar.bz2
cd boost_1_55_0
./bootstrap.sh --with-toolset=mingw --prefix=$GNU_LOCALDESTDIR/boost_temp


sed -e s/gcc/mingw/ project-config.jam > project-config.jam
./b2 install




# =============================================================================
# Appendix C.5: Microsoft Platform SDK
# =============================================================================
# So far I've been getting along without it.
# http://msdn.microsoft.com/en-us/windows/bb980924






# =============================================================================
# Appendix D: Build XDebug for Debugging PHP Hosted in WAMP Server
# =============================================================================
While trying to establish a debugging connection with xdebug, for PHP running on the
server I ran into many connection issues.  The below script will determine if a
connection is possible independent of Netbeans or any other debugger.  The suggested
script came from here:

https://blogs.oracle.com/netbeansphp/entry/howto_check_xdebug_installation


IMPORTANT: This script should work fine under Linux, but assumes that Windows has
a drive mapped from //WEBSERVER/html to /l/ under msys/ 

THE FOLLOWING IS THE CONTENT FOUND AT http://www.markhodges.com/dbgtest.php:

<?php
	// Test whether xdebug running on an apache server can be communicated with.
	// 
	// Usage:
	// 
	// 1.) Run the following from the command line (NOTE: This file must be named dbgtext.php):
	//     ALSO, I have placed this file in /var/www/html/dbgtest.php
	// 
	//     From Linux:
	// 
	//          /usr/bin/php /var/www/html/dbgtest.php
	// 
	// 	From WAMP in mingw shell (NOTE: Your php version number may be different):
	// 
	//          /c/wamp/bin/php/php5.5.12/php /l/dbgtest.php
	// 
	// 2.) Start debug session within a browser window:
	// 
	//     From Linux:
	// 
	//         BROWSE TO: http://localhost/_phpinfo.php?XDEBUG_SESSION_START=mysession
	// 
	// 
	//     From Windows:
	// 
	//         BROWSE TO:
	//             http://www.markhodges.com/_phpinfo.php?XDEBUG_SESSION_START=mysession
	// 
	// Troubleshooting:
	//
	//     Background and a broad set of ideas:
	//
	//         https://undercovertechguy.wordpress.com/2012/11/10/oh-xdebug-where-art-thou/
	//
	//     Check the Apache error log:
	//
	//         su -
	//         leafpad /etc/httpd/logs/error_log
	//
	//         What to look for:  http://ramandvtechnotes.blogspot.com/2009/12/xdebug-problems-with-selinux.html
	//
	//     To run the SELinux gui tool:
	//
	//         /usr/bin/system-config-selinux
	//
	//     Check SELinux status:
	//
	//         /usr/sbin/sestatus
	//
	//     Enable SELinux:
	//
	//         su -c "setenforce 1"
	//
	//     Disable SELinux:
	//
	//        su -c "setenforce 0" 
	//
	//     Check firewall status:
	//
	//         systemctl status firewalld
	//
	//     Disable firewall:
	//
	//         systemctl disable firewalld
	//         systemctl stop firewalld
	//
	//     Enable firewall:
	//
	//         systemctl start firewalld
	//
	//     Check SELinux bools related to httpd:
	//
	//         /usr/sbin/getsebool -a | grep httpd
	//
	//     Turn on httpd_can_network_connect
	//
	//         setsebool -P httpd_can_network_connect on
	//
	//
	//         
	// References:
	// 
	// https://blogs.oracle.com/netbeansphp/entry/howto_check_xdebug_installation

	$address = '10.0.0.100';	// Server running apache with xdebug.
	                            // 10.0.0.100 is Linux server.
	$port = 9000;
	$sock = socket_create(AF_INET, SOCK_STREAM, 0);
	socket_bind($sock, $address, $port) or die();
	socket_listen($sock);
	$client = socket_accept($sock);
	echo "Connection established: $client";
	socket_close($client);
	socket_close($sock);
?>

END CONTENT OF http://www.markhodges.com/dbgtest.php:

See embedded links for more details.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
In order to run this script, we need to be able to access \\WEBSERVER\html\dbgtest.php
from the MSYS command line.  This seems good to establish regardless on the xdebug issue.

At the moment, given deficiencies
(http://mingw.5.n7.nabble.com/Problems-mounting-a-UNC-path-td26980.html
it seems the most reliable method is to map a Windows drive, then mount
that drive under msys.

Under windows explorer select \\WEBSERVER

Tools->Map network drive
Select:
	Drive: L:
	Folder: \\WEBSERVER\html

Check:

	Reconnect at logon
	Connect using different credentials

	Enter Linux login and password.

TEST:

	From msys shell:

	cd /l/
	ls

	You should see the root of the Linux var/www/html/ folder.  The
	instruction dbgtest.php:



# =============================================================================
# Appendix E: Pacman
# =============================================================================
#
# Pacman Wiki:
# https://wiki.archlinux.org/index.php/Pacman


# In most cases the proper command to remove software is:

pacman -Rns package_name

# Removes the package, avoiding orphaned dependencies and erasing its global
# configuration, type


pacman -R

# Only removes the package.


pacman -Rs

Removes the package and those of its dependencies that aren’t needed by any
other application.



# =============================================================================
# Appendix F: Installing a static pkg-config binary
# =============================================================================

!! IMPORTANT !!
THE STATIC PKG-CONFIG HAS BEEN MOVED INTO THE BUILD.SH FILE
FOUND UNDER ~/PROJECTS/GNU.  SO YOU CAN IGNORE THIS.

*** WINDOWS 32-bit, 64-bit and Linux ***

The pkg-config tool is necessary to build a number of local packages.
To resolve a circular dependency between pkg-config and glib I've
provided a staticly linked version we install in $GNU_LOCALDESTDIR. Later
on we'll replace it with our own build.

# Unpack the archive and install pkg-config into $GNU_LOCALDESTDIR.
# ---------------------------------------------------------
cd $GNU_LOCALBUILDDIR && \
wget -c http://ingar.satgnu.net/devenv/mingw32/files/msys-pkg-config-0.26-static.zip && \
unzip msys-pkg-config-0.26-static.zip && \
install pkg-config.exe $GNU_LOCALDESTDIR/bin
#
# There is a bug that affects the next part of this guide, as a workaround we install a pkg-config.sh
# wrapper script:
# ---------------------------------------------------------
cat >  $GNU_LOCALDESTDIR/bin/pkg-config.sh << "EOF"
#!/bin/sh
if pkg-config "$@" > /dev/null 2>&1 ; then
res=true
else
res=false
fi
pkg-config "$@" | tr -d \\r && $res

EOF
#
# Make the script executable and point the PKG_CONFIG environment variable to
# the script:
# ---------------------------------------------------------
chmod ugo+x $GNU_LOCALDESTDIR/bin/pkg-config.sh

# Verify that PKG_CONFIG is already set in $GNU_LOCALDESTDIR/etc/profile.local.
# You should *not* need the below line to add it.
echo "PKG_CONFIG=$GNU_LOCALDESTDIR/bin/pkg-config.sh" >> $GNU_LOCALDESTDIR/etc/profile.local && \
echo "export PKG_CONFIG" >> $GNU_LOCALDESTDIR/etc/profile.local
# 
# Load the altered profile.local:
# ---------------------------------------------------------
source $GNU_LOCALDESTDIR/etc/profile.local



# =============================================================================
# Appendix G: Links
# =============================================================================
#
# Pacman Wiki:
#
# https://wiki.archlinux.org/index.php/Pacman
#
#
# 



