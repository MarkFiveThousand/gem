# =============================================================================
#
# Install Fedora 35 on Windows Subsystem for Linux (WSL) on Windows 10.
#
# Sources:
#
#	Common DOS->Bash Commands (Scroll down to find the table):
#
#		https://virtualizationreview.com/articles/2017/01/27/using-the-windows-subsystem-for-linux.aspx
#
# =============================================================================

# =============================================================================
# Purpose: Install Fedora 35 on Windows Subsystem for Linux (WSL) on Windows
#          10.

# =============================================================================
# Document Conventions:
# 
# Lines in this document that are preceded wtih '#' are intended the be human
# readable instruction.  Lines that are not preceeded with '#' are commands to
# be typed, or more typically copy-and-pasted into the command terminal for
# execution.

# As we progress through this installation we will move between the Microsoft
# Cmd terminal/shell and the WSL linux terminal/shell.  The command prompt for
# The Windows Cmd terminal is C:>, or often a longer variation of that.  The
# command prompt for the WSL linux terminal/shell is $, or often a longer
# variation of that.
# 
# Typing 'wsl' from the Windows terminal launches the WSL linux termial in the
# same window, though we have not yet fully configured it.  Typing 'exit' in
# the WSL linux termial exits the WSL linux termial returning to the Windows
# terminal.

# Through the early portion of this document, pay attention to whether you are
# in a Windows Cmd.com shell/terminal or the Linux bash shell/terminal.  Notice
# when we are launching or querying WSL, we are doing so from the Windows
# Cmd.com terminal.  Look for C:\>.  We will indicate this with the annotation:
# (FROM WINDOWS CMD SHELL)  In later parts of this documentation we will be
# executing commands from the WSL terminal.  These will be noted with (FROM
# LINUX WSL SHELL).


# =============================================================================
# Getting Started
#
# (FROM WINDOWS CMD SHELL) Make sure that WSL is at version 2:

wsl --set-default-version 2


# (FROM WINDOWS CMD SHELL) Update WSL:

wsl --update

# (FROM WINDOWS CMD SHELL) Query wsl.exe to receive help from the command line.
# Read through the command line options.  We'll use a few of these shortly.

wsl --help

# Try listing your installed WSL distrobutions.  You may have Ubuntu installed
# by default.  My preference is Fedora linux.  Fedora favors bleeding edge
# versions of libraries and applications. These instructions will guide through
# removing Ubuntu (which may be optionally ignored), and importing a minimal
# base installation of Fedora Linux, which we will expand upon.  At this point
# you should see a reference to either Ubuntu and/or fedora linux.

wsl -l


# =============================================================================
# Open a WSL Linux Command Prompt/Shell/Terminal
#
# We will change the default user to be our user shortly.  This will open a
# linux command prompt as either root (administrator) or your user's home
# directory.  The user's home directory in WSL is not the same as your user's
# home directory in Windows (C:\Users\%username%.)
#
# All files in WSL are stored on a virtual hardrive located on your local
# harddrive.  As transferring files between the two is less efficient, we will
# do the majority of our project building entirely within WSL and therefore on
# it's virtual hard drive.  This means linux applications that process our
# projects will be installed within linux on it's virtual hard drive.  We will
# get into how to install an X Windows server on Microsft Windows to allow WSL
# linux applications to display their application windows while running in the
# WSL command terminal shortly.

wsl

# =============================================================================
# Exit the WSL terminal command prompt
#
# Notice that exiting the WSL terminal returns you to the Window Cmd terminal
# in the same window.

exit


# =============================================================================
# Find and Import the Latest Fedora Linux Image
#
# Source: https://dev.to/bowmanjd/install-fedora-on-windows-subsystem-for-linux-wsl-4b26?fbclid=IwAR0Fd2w7KnCnbqolFxbK64v-IqTPmJBPCKBo5UugtAjTZuwVLHCMh_GdJbs
#
#
# This is a very minimal installation of Fedora Linux.  I favor the Fedora
# distrobution because it favors the last available development libraries and
# applications.
# 
# We will locate a nightly build image stored as a .tar file, download it,
# and assign the location of the downloaded image in a variable, which we will
# use to import the operating system image into the virtual machine's virtual
# hard drive.
#
# The drive we are about to build will be located in Windows at:
#
# %userprofile%\wsl\fedora\ext4.vhdx
#
# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Important!
#
#     Keep an eye on the size of this file!  It is your linux virtual hard
#     drive.  It will quickly grow from hundreds of megabytes to several
#     gigabytes after we install all the software developement packages we
#     require.  If you later lose interest in WSL, you will want to make
#     sure this file gets deleted to recover this storage space. That would
#     be after you've backed up anything you would like to keep, of course.
# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
#
# As we progress through the next series of steps, please be aware that some of
# the file names contain numbers consisting of dates.  The numbers you see in
# the file names used in these example may be different than the ones you see.

# Navigate your browser to:
#
# https://kojipkgs.fedoraproject.org/packages/Fedora-Container-Base/35
#
# Notice the folders are sorted by date.  Enter the folder with the latest
# date.

# Enter the images folder.
#
# Your URL path should look something like:
#
# https://kojipkgs.fedoraproject.org/packages/Fedora-Container-Base/35/20211231.0/images/
#
# In the above example, the 35 is Fedora version 35.  The 20211231 is year
# 2021, month 12, and day 31.

# Download the file beginning, "Fedora-Container-Base-35-" and ending with
# ".x86_64.tar.xz."  The number in the middle is the date.  Yours will be
# different than mine.  Keep in mind this is a ~35 megabyte file that you
# likely want to delete after we import it into our virtual hard drive.
#
# My files downloaded from the internet are located in:
#
# C:\Users\mhodges\Downloads.
#
# I'm unzipping the downloaded file using the Windows application 7-Zip,
# available from https://www.7-zip.org/download.html.
# 
# This fedora image file (layer.tar) is both zip-compressed (.xz) and tar-
# compressed (.tar).  We will use 7-Zip to extract, or unzip, then extract
# again to untar the compressed file.

# Right-click on the downloaded .xz file to direct 7-Zip to Extract to
# "Fedora-Container-Base-35-20211229.0.x86_64.tar/".  The folder created will
# be located in the same folder as the file you right-clicked to expand is
# located.
#
# Extracting ...
#
# C:\Users\mhodges\Downloads\Fedora-Container-Base-35-20211229.0.x86_64.tar.xz
#
# ... created the folder:
#
# C:\Users\mhodges\Downloads\Fedora-Container-Base-35-20211229.0.x86_64.tar

# Double click to enter this subfolder.  Again, right-click to expand the
# .tar file located there.  Enter the new subfolder created:
#
# C:\Users\mhodges\Downloads\Fedora-Container-Base-35-20211229.0.x86_64.
# tar\Fedora-Container-Base-35-20211229.0.x86_64

# Enter the next folder whose file name is a long string of numbers:
#
# C:\Users\mhodges\Downloads\Fedora-Container-Base-35-20211229.0.x86_64.
# tar\Fedora-Container-Base-35-20211229.0.
# x86_64\51272ac677738cabed083179765436d099828595c010f0c4ef2ac261afaa27a0

# Find the file layer.tar located therein.  Layer.tar is your rootfs, that is
# the root file system for our bare minimal Fedora installation.  We're going
# to need to refer to this .tar file later. To remember where it is located,
# store it's file path in a variable named "file_layer_fedora."
#
# Modify the below variable assignment command to reference your layer.tar
# file.  Remember, you may copy file paths from Window File Expolrer to make
# the job easier.  Also, pay careful attention to the placement of quotes.
#
# The command below is in the form:
#
# set "key=value"
#
# Where key is the variable file_layer_fedora, and value is the very long path
# to our layer.tar file.
#
# Notice we have exited the wsl terminal and are now again working in the
# Windows Cmd termainal.
#
# (FROM WINDOWS CMD SHELL):

set "file_layer_fedora=C:\Users\mhodges\Downloads\Fedora-Container-Base-35-20211229.0.x86_64.tar\Fedora-Container-Base-35-20211229.0.x86_64\51272ac677738cabed083179765436d099828595c010f0c4ef2ac261afaa27a0\layer.tar"


# =============================================================================
# Manually Install the Kernel
#
# Do we need to if you don't install Ubuntu?
#
# Source: https://docs.microsoft.com/en-us/windows/wsl/install-manual



# =============================================================================
# Make a Folder for our Fedora Distro.
#
# This is where our virtual hard drive is going to be created:
# %userprofile%\wsl\fedora\ext4.vhdx.  You are welcome to change it.  As warned
# earlier, keep an eye of this size of this file, in particular after upgrading
# and installing all our developement software tools.  We expect it to grow to
# a few gigabytes.
#
# (FROM WINDOWS CMD SHELL):

cd %userprofile%
mkdir wsl
cd wsl
mkdir fedora
cd fedora


# =============================================================================
# Import our Fedora Distro.

wsl --import fedora %userprofile%\wsl\fedora %file_layer_fedora%

# Note: This creates a 207 MB (217,055,232 bytes) hard disk image file:
#
# %userprofile%\wsl\fedora\ext4.vhdx
#
# After the upgrade procedura the size jumped to 464 MB (486,539,264 bytes),
# then after installing all our development software it jumped again to 3.35 GB
# (3,607,101,440 bytes.) Your mileage may vary.
#
# It is now safe to delete the downloaded files including the layer.tar file.


# =============================================================================
# View Installed Distros
#
# (FROM WINDOWS CMD SHELL):

wsl -l -v

# You may see either Ubuntu, fedora, or both at this point:
#
# Windows Subsystem for Linux Distributions:
# Ubuntu (Default)
# fedora

# =============================================================================
# Delete the Ubuntu Distro, if you so desire.
#
# I favor Fedora distro over Ubuntu.  I'm going to delete Ubuntu to reclaim
# space.  However, I may later come back to add support for Ubuntu, but not at
# this moment.

wsl --unregister Ubuntu

# =============================================================================
# Launch WSL/Fedora
#
# We will be logged in as the default user root, until we change
# that to our user later.  First we need to do some work as root, anyway.

wsl

# The next few groups of commands will be marked with
# (FROM LINUX WSL SHELL):
#
# Set root password:

passwd root


# =============================================================================
# Upgrade the fedora installation
#
# This is where we're installing all our software development support, and the
# virtual hard drive ballons to over 3 gigbytes.  This process will take a
# while.
#
# (FROM LINUX WSL SHELL):

dnf upgrade -y

dnf install -y man-db xclip initscripts iputils xterm net-tools fping which hostname ncurses util-linux passwd cracklib-dicts kdiff3 *mercurial*
dnf install -y python3-matplotlib cmake cmake-gui llvm clang mingw64-gcc mingw64-gcc-c++ mingw64-dlfcn-static git perl meson
dnf -y groupinstall "Development Tools" "Development Libraries" "X Software Development" "C Development Tools and Libraries"
dnf -y install mesa-libGLES-devel libXt-devel libXaw-devel


# =============================================================================
# Create a User Account.
#
# While we are at it, let's add them to the wheel group so the user can sudo.
# Don't forget to replace <myusername> with something that makes sense for you.
# In Linux environments it's customary to use your first initial followed by
# your last name, so John Smith would be jsmith.
#
# (FROM LINUX WSL SHELL):

useradd -G wheel <myusername>

# Then create a password for that user:

passwd <myusername>


# Add Sudo (Super User Do) Permission for Our User
#
# The following changes will enable elevated privledges for our user, allowing
# them to run commands as root, i.e. super user.

# Copy the entire block below beginning with "cat" all the way through "EOF"
# and paste it all into the terminal window.
# Copy Begin Here - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

cat > temp << EOF

Defaults:${USER}    !authenticate
${USER} ALL=(root) NOPASSWD: /bin/dnf, /bin/mount, /bin/umount, /usr/sbin/reboot, /usr/sbin/shutdown, /bin/systemctl, /bin/rpm, /bin/touch, /bin/cat, /bin/chown, /bin/chmod, /bin/chgrp, /usr/sbin/alternatives, /bin/wget, /bin/sh, /usr/sbin/setenforce
EOF

# Copy End Here.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Include EOF above. Do not include these lines.  Paste the above text into the
# wsl terminal.


cat temp >> /etc/sudoers
rm -f temp

# Have a look at the changes we made to /etc/sudoers.
cat /etc/sudoers


# =============================================================================
# Configure WSL
#
# Two files control configuration of WSL: wsl.conf and .wslconfig.  Source:
# https://docs.microsoft.com/en-us/windows/wsl/wsl-config


# Set our user as the default user when wsl opens.
#
# Copy the entire block below beginning with "cat" all the way through "EOF"
# and paste it all into the terminal window.
# Copy Begin Here - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

cat << EOF >> /etc/wsl.conf
# Source: https://docs.microsoft.com/en-us/windows/wsl/wsl-config#wslconf

# Automatically mount Windows drive when the distribution is launched
[automount]

# Set to true will automount fixed drives (C:/ or D:/) with DrvFs under the root
# directory set above. Set to false means drives won't be mounted automatically,
# but need to be mounted manually or with fstab.
enabled=true

# Sets the `/etc/fstab` file to be processed when a WSL distribution is
# launched.
mountFsTab = true

# Set whether WSL supports interop process like launching Windows apps and
# adding path variables. Setting these to false will block the launch of Windows
# processes and block adding $PATH environment variables.

[interop]

# Setting this key will determine whether WSL will support launching Windows
# processes.
enabled = false

# Setting this key will determine whether WSL will add Windows path elements to
# the $PATH environment variable.
appendWindowsPath = false


# Set the user when launching a distribution with WSL.
[user]
default=${USER}
EOF

# Copy End Here.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Include EOF above. Do not include these lines.  Paste the above text into the
# wsl terminal.

# That should copy the contents above into a file located at /etc/wsl.conf.
# Let's verify the file exists as expected.  The cat command displays the
# contents of a text file:

cat /etc/wsl.conf


# =============================================================================
# Useful Operations
# =============================================================================

# =============================================================================
# Accessing WSL files from Windows
#
# The root of the Fedora Linux file system may be accessed from Windows File
# Explorer at:

\\wsl$\fedora

# The user's home directory in Fedora Linux file system may be accessed from
# Windows File Explorer at:

\\wsl$\fedora\home\%username%

# Alas, from the Windows Cmd prompt the below command does not work:

cd \\wsl$\fedora\home\%username%

# I receive:
#
# cd \\wsl$\fedora\home\%username%
#
# '\\wsl$\fedora\home\mhodges'
# CMD does not support UNC paths as current directories.
#
# We can still paste the following into Windows explorer.exe to access the WSL
# file system from Windows file explorer:

\\wsl$\fedora\home\%username%



# =============================================================================
# Accessing Windows files from WSL
#
# In linux, drives are mounted as folders.  The root of the file system is /.
# In our case, the Windows C:\ drive has been mounted within wsl fedora linux
# at /mnt/c.  The cd command changes the current directory.  The ls command
# displays a list of files and sub directories contained therein.

cd /mnt/c
ls

# =============================================================================
# Consider Downloading Microsoft Terminal
# =============================================================================
# I've downloaded and am currently using Microsft's Terminal application,
# available from the Microsft store.  Microsoft has put a lot of work into
# bringing their terminal up to par.  It seem
#
# https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701



# =============================================================================
# Install an X Window Server
# =============================================================================
#
# Download VcXsrv Windows X Server from:
# https://sourceforge.net/projects/vcxsrv/
#
# Begin the installation.  Choose:
#
# * Multiple windows.
# * Start no client.
# * Check Disable access control.
# * Do not save configuration.
#
# The firewall setting seem backwards to me.  It seems to only work if public
# is checked to allow connections from public networks.  Checking private seems
# to have no effect.
#
# Windows Security ->
#     Firewall & network protection ->
#         Allow an app through firewall ->
#             Make sure VcXsrv has both public and private checked.
#
# The XLaunch settings suggest to make sure to export the LIBGL_ALWAYS_INDIRECT
# =1 environment variable, but that makes glxgears not work well.  We should
# test this more.  I'm not setting it at this time.
#
# Add to gem_bash_init.  Note, the LIBGL_ALWAYS_INDIRECT=1 is recommended, but
# it causes glxgears to hang.  I have not tested it boyond that.
#
# export LIBGL_ALWAYS_INDIRECT=1
# export DISPLAY=$(grep -m 1 nameserver /etc/resolv.conf | awk '{print $2}'):0.0

# =============================================================================
# Create a Shortcut to Launch VcXsrv at Start Up.
#
# 1.) Enter %AppData%\Microsoft\Windows\Start Menu\Programs\Startup folder
# 2.) Right-click -> New -> Shortcut
# 3.) Type the location of the item: C:\Program Files\VcXsrv\vcxsrv.exe
# 4.) Type a name fo this shortcut: VcXsrv
# 5.) Right-click on the shortcut -> Properties
# 6.) Under the Shortcut tab enter Target: "C:\Program Files\VcXsrv\vcxsrv.exe" :0 -clipboard -multiwindow -wgl -ac


# =============================================================================
# Install Google Chrome
#
# We likely won't prefer browsing throught this Linux installation.  However,
# hyperlinks in documents opened in Linux will look for a default browser to
# open with.

sudo dnf -y install fedora-workstation-repositories
sudo dnf config-manager --set-enabled google-chrome
sudo dnf -y install google-chrome-stable


# =============================================================================
# Install FMan- HOLD OFF!!
# 
# FMan is a cross platofrm file explorer.
# 
# HOLD OFF!!  FMan has not been updated to work on Fedora 35 yet.

# Install fman's GPG key:
sudo rpm -v --import https://download.fman.io/rpm/public.gpg

# Add fman's repository:
sudo dnf config-manager --add-repo https://download.fman.io/rpm/fman.repo

# If you are on Fedora 30+, please install the OpenSSL compatibility package:
# This is the problem.  This library is very old and has been retired for
# security reasons.
sudo dnf install compat-openssl10

# Then you can install fman:
sudo dnf install fman


# =============================================================================
# Download Gem

# By default, gem will be installed in your home directory under ~/gem.  If
# you'd like to change it, modify gem_fullpath_gem below.  However, portions of
# these instructions, in their current state, may not work if gem is installed
# elsewhere.

# NOTE: The clone operation will fail if you already have a gem directory.  If
# you do, you'll either need to rename your existing gem directory, or perform
# a "git pull" from within your gem directory to update it from github.
if [[ -d ${HOME}/gem ]]; then

	if [[ -d ${HOME}/gem_saved ]]; then
		echo "Unable to save a copy of the existing gem directory.  A directory named 'gem_saved' already exists."
	else
		mv ${HOME}/gem ${HOME}/gem_saved

		# If wclang is installed, move it
	fi
fi

gem_fullpath_gem_parent=${HOME}

cd ${gem_fullpath_gem_parent}

git clone https://github.com/MarkFiveThousand/gem.git


# Gem includes some preference settings that may vary bewteen users.  See
# ../gem/home/mhodges for an example of the kind of files you might want to
# include in the file tree.


# =============================================================================
# Initialize Git
#
# Git is a version control package installed on a public web server.  Pushing to
# and pulling from the Git server will be the primary means by which you and I
# share changes to our code.  It and other public version control servers called
# repositories host software projects, libraries and various other packages.
#
# These instructions detail configuring the Git application and downloading the
# Gem source code.  Our Gem project is hosted at
# https://github.com/MarkFiveThousand/gem.
#
# Resources:
#    Git Handbook:
#        https://www.git-tower.com/learn/git/ebook/en/command-line/remote-repositories/integrating-remote-changes#start


# The following commands must be executed in the gem directory.
cd ${gem_fullpath_gem_parent}/gem

# Identify yourself to Git by setting the my_email and my_name variables below
# to your information.

gem_user_name="First Last"
gem_user_email="your@email.address"

# I use the following:
# gem_user_name="Mark Hodges"
# gem_user_email="markhodges5000@gmail.com"

git config --global user.email ${gem_user_email}
git config --global user.name ${gem_user_name}

# Direct Git to our Gem repository.
git remote rm origin
git remote add origin git@github.com:MarkFiveThousand/gem
git config master.remote origin
git config master.merge refs/heads/master

git config --global pull.rebase true
# Setting this to true means that git pull is always equivalent to git pull
# --rebase (unless branch.<branchname>.rebase is explicitly set to false). This
# can also be set per repository or globally.

git config --global fetch.prune true
git config --global diff.colorMoved zebra

# Others to consider.  Read up on these:
git config –global rebase.autostash
git config –global rebase.autoSquash
git config –global push.default simple

# If you would like to change your details later on, you can manually edit the
# ~/.gitconfig file for global settings, or edit .git/config to change settings
# on a particular repo. Most simply, you can run the above commands again with
# the new details.

# -----------------------------------------------------------------------------
# Enable Write Access to Gem Repository (Not applicable to most people.)
#
# Source: https://www.git-tower.com/learn/git/ebook/en/command-line/advanced-topics/ssh-public-keys
# Source: https://stackoverflow.com/questions/749544/pipe-to-from-the-clipboard-in-bash-script
#
# Most of you will not require write access to the Gem repository.  You already
# have read access.  If you don't need to write to the Gem repository, you may
# skip this section.
#
# This will require cooperation with the Gem repository maintainer,
# markhodges5000@gmail.com.  That's me.
#
# Run the ssh-keygen command shown below, replacing "name@example.com" with
# your own email address.

ssh-keygen -t rsa -C "your@email.address"

# The following section is mostly quoted from the above link:
#
# With the "-t" flag, we demand an "RSA" type key, which is one of the newest
# and safest types. With the "-C" flag, we provide a comment which you can
# think of as a kind of description or label for this key. Using your email
# address, e.g., lets you identify it more easily later.
# After confirming this command, you'll be asked to:
#
# (1) Enter a name for this new key. Just hit RETURN to accept the default name
# and location.
#
# (2) Provide a passphrase. Although SSH public key authentication can be used
# safely without any password, you should nonetheless enter a strong passphrase
# to enhance security even further.
#
# Now, two files will have been created for you: "id_rsa.pub" (your public key)
# and "id_rsa" (your private key). If you're on a [Linux-based system], you'll
# find these in the ".ssh" folder inside your home directory (~/.ssh/).
#
# If you take a look at the actual contents of your public key file, you'll see
# something like this:

cat ~/.ssh/id_rsa.pub

# ssh-rsa AAAB3nZaC1aycAAEU+/ZdulUJoeuchOUU02/j18L7fo+ltQ0f322+Au/9yy9oaABBRCrH
# N/yo88BC0AB3nZaC1aycAAEU+/ZdulUJoeuchOUU02/j18L7fo+ltQ0f322AB3nZaC1aycAAEU+/Z
# dulUJoeuchOUU02/j18L7fo+ltQ0f322AB3nZaC1aycAAEU+/ZdulUJoeuchOUU02/j18L7fo+ltQ
# 0f322AB3nZaC1aycAAEU+/ZdulUJoeuchOUU02/j18L7fo+ltQ0f322klCi0/aEBBc02N+JJP you
# r@email.address
#
# It's this output that needs to be installed on the Git GitHub server you want
# to get access to. You'll have to provide this to the Git maintainer,
# markhodges5000@gmail.com.
#
# You have to copy the content of the public key file exactly as it is - no
# whitespace or the like is accepted. To make this as safe and easy as
# possible, you can use the following commands to have this copied to your
# clipboard:

# The public key will be stored at ~/.ssh/id_rsa.pub.

function gem_copy_id_rsa_pub()
{
    # Change if needed.
    gem_fullpath_id_rsa_pub=~/.ssh/id_rsa.pub

    if [[ ! -f ${gem_fullpath_id_rsa_pub} ]]; then
        echo "ERROR: Public key does not exist: ${gem_fullpath_id_rsa_pub}."; return
    fi
    gem_os=$(uname -s)
    if [[ ${gem_os} == "MINGW64"* ]]; then
        gem_fullpath_clip_exe=/c/Windows/System32/clip
    elif [[ ${gem_os} == "CYGWIN"* ]]; then
        gem_fullpath_clip_exe=/cygdrive/c/Windows/System32/clip
    elif [[ ${gem_os} == "Linux" ]]; then
        gem_fullpath_clip_exe="$(which xclip)"
        gem_clip_params="-selection c"
    else
        echo "ERROR: Failed to recognise os: ${gem_os}."; return
    fi
    if [[ ! -f ${gem_fullpath_clip_exe} ]]; then
        echo "ERROR: Failed to locate executable: ${gem_fullpath_clip_exe}."; return
    fi
    cat ${gem_fullpath_id_rsa_pub} | ${gem_fullpath_clip_exe} ${gem_clip_params}
}
gem_copy_id_rsa_pub


# Finally, paste the contents of the clipboard (ctrl-alt-v) into the body of an
# email to the Git maintainer, markhodges5000@gmail.com.
#
# Wait for the Git maintainer to add your key to the repository, thereby
# allowing you to perform push operations.


cd ~/gem

# Add upstream (tracking) reference, used by argument-less git-pull and other
# commands.  It tells git fetch/git pull which branch to merge.

git branch --set-upstream-to=origin/master master


# =============================================================================
# Update .bashrc to Run Scripts Initializing the Gem Development Environment
#
# The file .bashrc located in ${HOME}/ is a shell script that gets run each
# time the user logs into a shell.  We're going to insert commands to
# initialize the shell for our Gem development environment.
#
# Scripts that personalize the shell environment are located under the
# gem/home# directory ~/gem/home/mhodges/ and sibling directories per user.
# We will add your own user directory under gem/home/, copying file file from
# gem/home/mhodges/.


# Remove temporary gem_colors() function from ~/.bashrc:
sed -i "/function gem_colors()/,/gem_colors  # Call it./d" ~/.bashrc

# The user_bash_init script performs tasks to set up the user's environment.
# This includes mounting network drives, declaring the location of the Android
# SDK, defining shell aliases, and configuring the environment for various
# installed packages.

# Copy mhodges' user_bash_init file as our own for a starter.
if [[ $(whoami) != "root" ]]; then

    gem_fullpath_user_sbin=~/gem/home/${USER}/local/sbin/

	# Create a directory under gem for our personal settings:
    mkdir -p ${gem_fullpath_user_sbin}

	# Copy user mhodges' environment settings
    cp ~/gem/home/mhodges/local/sbin/user_bash_init ${gem_fullpath_user_sbin}
fi


# Add calls to gem's bash scripts to ~/.bashrc to prepare the environment.
#
# *FIX: The command below is producing "-bash: y: command not found", but
# otherwise works.

y | cp ~/.bashrc ~/.bashrc.bak
cat << EOF >> ~/.bashrc

# Source our definitions.  NOTE: When running as root ${USER}'s gem installation
# will be referenced.

export DISPLAY=$(grep -m 1 nameserver /etc/resolv.conf | awk '{print $2}'):0.0

if [[ ${USER} != "root" ]]; then
    gem_fullpath_gem_bash_init=${HOME}/gem/local/sbin/gem_bash_init
    gem_fullpath_user_bash_init=${HOME}/gem/home/${USER}/local/sbin/user_bash_init

    if [[ -f \${gem_fullpath_gem_bash_init} ]]; then
        source \${gem_fullpath_gem_bash_init}
        if [[ -f \${gem_fullpath_user_bash_init} ]]; then
            source \${gem_fullpath_user_bash_init}
        else
            echo "\$BASH_SOURCE(\${LINENO}) WARNING: \${gem_fullpath_user_bash_init} not found."
        fi
    else
        echo "\$BASH_SOURCE(\${LINENO}) WARNING: \${gem_fullpath_gem_bash_init} not found."
    fi
fi
EOF



