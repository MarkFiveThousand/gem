#!/bin/bash
#  ___________                           __________
# /\   _______\                         /\   ______\
# \ \  \______/_     ___   ____ ____ ___\ \  \_____/_     ___   ___ ___  ______    ___    ___
#  \ \  \ /\__  \  /'___`\/\   V    V   \\ \_______  \  /'   `\/\  \\  \/\   __\/' ._`\ /'___`\
#   \ \  \\/__\  \/\  ___/\ \  \/\  \/\  \\/_______\  \/\  \\  \ \  \\  \ \  \ /\  \__//\  ___/
#    \ \__________\ \____\ \ \__\ \__\ \__\ /\_________\ \_____/\ \______\ \__\\ \____/\ \____\
#     \/__________/\/____/  \/__/\/__/\/__/ \/_________/\/____/  \/______/\/__/ \/___/  \/____/


. gem_script
. gem_build

export PYTHON=/usr/bin/python2

function gem_build_v_SetDefaults
{
	gem_build_SetDefaults;

	gem_c_standard="-std=gnu11"	# c90, c99, c11, c18, c2x, gnu90, gnu99, gnu11, gnu17, gnu2x
	gem_cxx_standard="-std=gnu++11"	# c++98, c++03, c++11, c++14, c++17, c++2a, c++20, gnu++98, gnu++03, gnu++11, gnu++14, gnu++17, gnu++2a, gnu++20

	gem_use_clang=1

	gem_is_cplusplus=0

	gem_build_script="cmake"
#	gem_build_script="autotools"
#	gem_build_script="meson"

	gem_lib_type=shared			# gem_lib_type is not fully implemented.
#	gem_lib_type=static
#	gem_lib_type=both

	# Set default build host.
	if [[ ${gem_os} == "MINGW64"* ]]; then	# MinGW shell on Windows.
		gem_host=mingw
#		gem_host=msvc
	elif [[ ${gem_os} == "CYGWIN"* ]]; then		# Cygwin shell on Windows.
		gem_host=cygwin
#		gem_host=mingw
	elif [[ ${gem_os} == "Linux"* ]]; then	# Linux shell.
		gem_host=linux
#		gem_host=mingw
#		gem_host=android_arm64_v8a
	fi

	gem_build_type=release
#	gem_build_type=debug

	# The package url must be in the following format:
	# <url parent>/<package name>-<version>.tar.<extension>
	# E.g.: http://www.zlib.net/zlib-1.2.11.tar.gz
	gem_filename_url=ftp://sourceware.org/pub/libffi/libffi-3.2.tar.gz
}

function gem_build_v_DownloadSource
{
	if [[ -d ./zziplib || -d ./src ]]; then
		gem_script_v_Error "The source tree already exists.  Refusing to download."
	fi
	git clone --depth=1 https://github.com/gdraheim/zziplib.git

	if [[ -d ./zziplib && ! -d ./src ]]; then
		mv ./zziplib ./src
		if [[ -f ./src/CMakeLists.txt || -f ./src/_config.h.cmake ]]; then
			gem_script_v_Error "zziplib seems to now include support for CMake.  We can now remove our cmake directory."
		else
			cp ./cmake/* ./src
		fi
	fi
}

function gem_build_v_SetFlags
{
	gem_flags_cpp="${gem_flags_cpp} -I${gem_fullpath_install}/include"
	gem_flags_ld="${gem_flags_ld} -L${gem_fullpath_install}/lib"
}

function gem_build_v_OnConfigure
{
	gem_flags_c="$(gem_build_PkgConfig --cflags zlib) ${gem_flags_c}"

	gem_build_v_DebugDumpVars
	gem_build_OnConfigure
}

function gem_build_v_OnCommandLine_Configure_Autotools
{
	gem_build_OnCommandLine_Configure_Autotools

#	echo ${gem_cmd_line_configure} ; exit
}

function gem_build_v_OnCommandLine_Build
{
	gem_build_OnCommandLine_Build
}

function gem_build_v_OnBuild
{
	gem_flags_c="$(gem_build_PkgConfig --cflags zlib) ${gem_flags_c}"
	gem_flags_ld="$(gem_build_PkgConfig --libs zlib) ${gem_flags_ld}"

	gem_build_v_DebugDumpVars
	gem_build_OnBuild
}

function gem_build_v_OnInstall
{
	gem_build_OnInstall
}

function gem_build_v_OnUninstall
{
	gem_build_OnUninstall

	if [[ -d ${gem_fullpath_install}/include/zzip ]]; then
		gem_script_rmdir ${gem_fullpath_install}/include/zzip
	fi
}

function gem_build_v_Cmd_Clean
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_build_Cmd_Clean
}

# =============================================================================
#                                       gem_Main
# =============================================================================
function gem_script_v_OnArg
{
	local gem_return=0
	local num_args_handled=1
	case ${1} in
	*)	num_args_handled=$(gem_build_OnArg "$@")
		gem_return=$?
	esac
	echo ${num_args_handled}
	return ${gem_return}
}

function gem_script_v_Main
{
	gem_build_Main "$@"
}
gem_script_v_Main $@
