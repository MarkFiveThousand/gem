#!/bin/bash

function echoHelp()
{
echo "============================================================================="
echo "IMPORTANT: This script must be located in the parent of the source tree."
echo
echo "FILE STRUCTURE:"
echo
echo "    EXAMPLE:"
echo "        helloworld/..            Parent of source tree.  buildtool script here."
echo "            helloworld/          Source tree"
echo "            helloworld_build/    Object & cmake files"
echo "            helloworld_sdk/      Install location"
echo
echo "    YOURS:"
echo "        $PROJ_DIR/"
echo "            $PROJ_NAME/"
echo "            ${PROJ_NAME}_build/"
echo "            ${PROJ_NAME}_sdk/"
echo
echo "USAGE: buildtool OPTIONS"
echo
echo "  -api 9 or above          Required.  Specify the android API level."
echo "  -abi ABI-LEVEL           Required.  Specify the android ABI."
echo "                           Valid values are:"
echo "                             armeabi-v7a"
echo "                             arm64-v8a"
echo "  -config BUILD_CONFIG     Required.  Valid values are debug or release."
echo "  -ndk NDK_PATH            Specify the path to the NDK."
echo "  -redir                   Redirect the output to a text file in the"
echo "                           build directory."
echo "  -m, --cmake              Run cmake."
echo "  -c, --clean              Clean the project."
echo "  -b, --build              Build the project.  CONFIG must"
echo "                           be either debug or release."
echo "  -i, --install            Install the project."
echo
echo "EXAMPLE USAGE:"
echo
echo "    ./buildtool -api 21 -abi armeabi-v7a -config release -m -c -b -i -redir"
echo
echo "============================================================================="
}










##########################################################
# Get threading going on android using boost.            #
#                                                        #
# http://www.ogre3d.org/forums/viewtopic.php?f=2&t=79734 #
# Also, here: https://code.google.com/p/android-cmake/   #
##########################################################



export PROJ_NAME=ogre
export PROJ_DIR=$(pwd)			# Current folder; parent of source tree.

export BUILD_CONFIG=""

export SOURCE_DIR=$PROJ_DIR/$PROJ_NAME
export BUILD_DIR=$PROJ_DIR/${PROJ_NAME}_build
export BUILD_CONFIG_DIR=""
export INSTALL_DIR=$PROJ_DIR/${PROJ_NAME}_sdk
export INSTALL_CONFIG_DIR=""

#export HOST_SYSTEM=windows-x86_64
export HOST_SYSTEM=linux-x86_64


#export ANDROID_NDK=~/Android/Sdk/ndk-bundle

#android-ndk-r15c: All the ogre libs seem to build fine, but it complains
# about running "android update" on the sample program, because in r15c the
# android script/executable is depricated.  Try a lower version until we no
# longer are dependant upon the sample browser.
#export ANDROID_NDK=~/Android/android-ndk-r15c-linux-x86_64/android-ndk-r15c

#r14b did the same thing as r15c.
#export ANDROID_NDK=~/Android/android-ndk-r14b-linux-x86_64/android-ndk-r14b

export ANDROID_NDK=~/Android/android-ndk-r13b-linux-x86_64/android-ndk-r13b


export PATH="$PATH:$ANDROID_NDK/build:$ANDROID_NDK"





export ANDROID_ABI=""
export ANDROID_ARCH=""




# ===========================================
# Find suggestions for building many different multimedia and game-based libraries:
# https://github.com/OpenMW/eclipse-project
# Consider trying the following drop-in replacement for Google's NDK:
# https://www.crystax.net/
# ===========================================
export TARGET_PLATFORM=android
export CMAKE_MAKE_PROGRAM=$ANDROID_NDK/prebuilt/${HOST_SYSTEM}/bin/make
#export CMAKE_MAKE_PROGRAM=/bin/make


# Ogre build error suggests this:
# -mfloat-abi=softfp -mfpu=neon
# https://github.com/OpenMW/eclipse-project/blob/master/readme.txt  suggests this:
# -marm -march=armv7-a  -mfpu=neon -mfloat-abi=hard  -D_NDK_MATH_NO_SOFTFP=1 -Ofast
# https://forum.openmw.org/viewtopic.php?f=8&t=2414 suggested this:
# Maybe look into:
# -mfloat-abi=hard
# arch=armeabi-v7a-hard
# Build errors? See: https://code.google.com/p/android/issues/detail?id=58476
# 
#-mfpu=neon-vfpv4 -march=armv7-a -O3 -funsafe-math-optimizations -mcpu=generic-armv7-a -mtune=generic-armv7-a -ffast-math -mfloat-abi=softfp -funroll-loops -marm
# IMPORTANT: According to https://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html
# Under -mfpu=, -funsafe-math-optimizations must be used when using 'neon'
# This looks like it has some recent settings that we may find useful:
# https://github.com/MyGUI/mygui/commit/d8e17f1e478eb1dde44190b288af2c8a2d3ab8b5


#Commented out 4/30/2016 as a test.
#export CMAKE_CXX_FLAGS="-mfloat-abi=softfp -mfpu=neon -flax-vector-conversions ${CMAKE_CXX_FLAGS}"



export CMAKE_EXE_LINKER_FLAGS=



################################
# tool chain from taka-no-me: https://github.com/taka-no-me/android-cmake
################################
#CMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/../../android-cmake/toolchain/android.toolchain.cmake
################################
# tool chain provided with ogre
################################
# IMPORTANT:
# Using the Ogre provided toolchain file results in the following kinds of errors:
# 
# CMake Error: Error required internal CMake variable not set, cmake may be not be built correctly.
# Missing variable is:
# CMAKE_C_COMPILER_ENV_VAR
# 
# No CMAKE_C_COMPILER could be found.
# No CMAKE_CXX_COMPILER could be found.
# 
# It would seem someone has been monkeying around with Ogre's toolchain file.
# I recommend that we stick the OpenCV toolchain file, above, instead of the
# one provided along with Ogre.
# 
export CMAKE_TOOLCHAIN_FILE=$SOURCE_DIR/CMake/toolchain/android.toolchain.cmake


#OGREDEPS_ROOT=
#/home/mhodges/projects/ogre/v1-11/2018_05_12/ogre_build/android/armeabi-v7a/API_21/Release/Dependencies
#OGREDEPS_ROOT=/home/mhodges/projects/ogre/ogredeps/2016_03_12




# ----------- Temporarily commented out.  5/13/2018 -----------
# *FIX: is OGRE_DEPENDENCIES_DIR even defined yet?  It looks like not.
#ZLIB_FOUND=TRUE
#ZLIB_INCLUDE_DIRS=${OGRE_DEPENDENCIES_DIR}/include
##ZLIB_LIBRARIES=libzlib libzlib.a libzlib.so zlib zlib.a zlib.so
#
#ZZip_FOUND=1
#ZZip_INCLUDE_DIRS=${OGRE_DEPENDENCIES_DIR}/include
#ZZip_LIBRARIES=${OGRE_DEPENDENCIES_DIR}/lib/libzziplib.a
#
##OIS_FOUND=1
##OIS_INCLUDE_DIR=${OGRE_DEPENDENCIES_DIR}/include/OIS
##OIS_INCLUDE_DIRS=${OGRE_DEPENDENCIES_DIR}/include
##OIS_LIBRARIES=${OGRE_DEPENDENCIES_DIR}/libOIS.a
#
#FREETYPE_FOUND=1
#FREETYPE_INCLUDE_DIRS=${OGRE_DEPENDENCIES_DIR}/include
#FREETYPE_LIBRARIES=${OGRE_DEPENDENCIES_DIR}/libfreetype.a
#
#FreeImage_FOUND=1
#FreeImage_INCLUDE_DIRS=${OGRE_DEPENDENCIES_DIR}/include
#FreeImage_LIBRARIES=${OGRE_DEPENDENCIES_DIR}/libFreeImage.a
# ----------- Temporarily commented out.  5/13/2018 -----------




#######################
# Trying to make the following error go away:
# CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
# Please set them or make sure they are set and tested correctly in the CMake files:
# FREETYPE_FT2BUILD_INCLUDE_DIR (ADVANCED)
#
# It looks like all we really need is FREETYPE_FT2BUILD_INCLUDE_DIR.  If you can't
# get rid of this altogether, move it with the other freetype stuff.
# 
#######################
# ----------- Temporarily commented out.  5/13/2018 -----------
#export FREETYPE_FT2BUILD_INCLUDE_DIR=${OGRE_DEPENDENCIES_DIR}/include
# ----------- Temporarily commented out.  5/13/2018 -----------
#export FREETYPE_INCLUDE_DIR=${OGRE_DEPENDENCIES_DIR}/include
#export FREETYPE_LIBRARY_REL=${OGRE_DEPENDENCIES_DIR}/lib/libfreetype.a

#######################
# Enabling FREETYPE_HOME below alone does not make the "-- Could not locate FREETYPE" errors go away.
# Uncommenting the FREETYPE_HOME setting below has absolutely no effect on the error.
#######################
#export OIS_HOME=$OGRE_DEPENDENCIES_DIR
#export FREEIMAGE_HOME=$OGRE_DEPENDENCIES_DIR
#export FREETYPE_HOME=$OGRE_DEPENDENCIES_DIR
#export ZLIB_HOME=$OGRE_DEPENDENCIES_DIR
#export ZZIP_HOME=$OGRE_DEPENDENCIES_DIR


#export ANDROID_NATIVE_API_LEVEL=16	# For Galaxy S2 Skyrocket.  Causing build errors.
#export ANDROID_NATIVE_API_LEVEL=21	# For Galaxy S6  Causing build errors.
export ANDROID_NATIVE_API_LEVEL=""		# This one works.

# ----------- Temporarily commented out.  5/13/2018 -----------
#OGRE_ASSERTMODE=0
#OGRE_BUILD_COMPONENT_PAGING=TRUE
#OGRE_BUILD_COMPONENT_RTSHADERSYSTEM=TRUE
#OGRE_BUILD_COMPONENT_TERRAIN=TRUE
#OGRE_BUILD_COMPONENT_VOLUME=TRUE
#OGRE_BUILD_PLUGIN_BSP=FALSE
#OGRE_BUILD_PLUGIN_OCTREE=TRUE
#OGRE_BUILD_PLUGIN_PCZ=FALSE
#OGRE_BUILD_PLUGIN_PFX=TRUE
#OGRE_BUILD_RENDERSYSTEM_GLES2=TRUE
#OGRE_BUILD_TOOLS=FALSE
#OGRE_INSTALL_DOCS=FALSE
#OGRE_INSTALL_SAMPLES=FALSE
#OGRE_INSTALL_TOOLS=FALSE
#OGRE_STATIC=TRUE
# ----------- Temporarily commented out.  5/13/2018 -----------



# =============================================================================
#                                      build
# =============================================================================
function func_build()
{
    ValidateOptions

	if [[ ! -d $BUILD_CONFIG_DIR ]]; then
		echo "ERROR: The following directory does not exist:"
		echo "$BUILD_CONFIG_DIR"
		echo "Maybe you need to run cmake."
		exit
	fi
	
    cd $BUILD_CONFIG_DIR

#   ${CMAKE_MAKE_PROGRAM} -j9 # VERBOSE=1

	if [ $OPTION_REDIRECT_OUTPUT -eq 1 ]; then

		BUILD_OUTPUT_FILENAME="${BUILD_DIR}/build_output_${TARGET_PLATFORM}_${ANDROID_ABI}_API_${ANDROID_NATIVE_API_LEVEL}_${BUILD_CONFIG}.txt"echo "Redirecting output to ${BUILD_OUTPUT_FILENAME}"

		${CMAKE_MAKE_PROGRAM} -j6 > ${BUILD_OUTPUT_FILENAME} 2>&1
	else

		${CMAKE_MAKE_PROGRAM} -j6
	fi
	
	cd $BUILD_CONFIG_DIR/SampleBrowserNDK
	ndk-build .
}


# =============================================================================
#                                      install
# =============================================================================
function func_install()
{
    ValidateOptions

	echo "Entering directory: ${BUILD_CONFIG_DIR}"

    cd $BUILD_CONFIG_DIR

    if [ $TARGET_PLATFORM == "android" ]; then

		cd SampleBrowserNDK
		ant debug install
		
	else

		echo "Installing with: ${CMAKE_MAKE_PROGRAM} install"

		${CMAKE_MAKE_PROGRAM} install

	#	cd $INSTALL_CONFIG_DIR/lib
	#	mkdir $ANDROID_ABI
	#	cp * $ANDROID_ABI

	#	cd $ANDROID_ABI
	#	if [ $BUILD_CONFIG == "Debug" ]; then
	#		mv libzziplib_d.a libzzip_d.a
	#	else
	#		mv libzziplib.a libzzip.a
	#	fi

	fi
}


# =============================================================================
#                                      clean
# =============================================================================
function func_clean()
{
    ValidateOptions

	if [ -d $BUILD_CONFIG_DIR ]; then
		cd $BUILD_CONFIG_DIR

		${CMAKE_MAKE_PROGRAM} clean

		rm -rf $INSTALL_CONFIG_DIR/*
	fi
}


# =============================================================================
#                                      cmake
# =============================================================================
function func_cmake()
{
    ValidateOptions

    # Validate & clean directory structure
    # ------------------------------------
    # Assure file structure exists and is empty.
    if [ ! -d $BUILD_DIR ]; then
        mkdir $BUILD_DIR
    fi

    if [ ! -d $BUILD_DIR/$TARGET_PLATFORM ]; then
        mkdir $BUILD_DIR/$TARGET_PLATFORM
    fi

    if [ ! -d $BUILD_DIR/$TARGET_PLATFORM/$ANDROID_ABI ]; then
        mkdir $BUILD_DIR/$TARGET_PLATFORM/$ANDROID_ABI
    fi

    if [ ! -d $BUILD_DIR/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL} ]; then
        mkdir $BUILD_DIR/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL}
    fi

    if [ ! -d $BUILD_DIR/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL}/Debug ]; then
        mkdir $BUILD_DIR/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL}/Debug
    else
        rm -fr $BUILD_DIR/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL}/Debug/*
    fi

    if [ ! -d $BUILD_DIR/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL}/Release ]; then
        mkdir $BUILD_DIR/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL}/Release
    else
        rm -fr $BUILD_DIR/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL}/Release/*
    fi


    if [ $TARGET_PLATFORM == "android" ]; then

		cd $BUILD_CONFIG_DIR

		EGL_INCLUDE_DIR=${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/${ANDROID_ARCH}/usr/include
		EGL_egl_LIBRARY=${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/${ANDROID_ARCH}/usr/lib/libEGL.so
		FREETYPE_FT2BUILD_INCLUDE_DIR=${OGRE_DEPENDENCIES_DIR}/include/freetype
		FREETYPE_INCLUDE_DIR=${OGRE_DEPENDENCIES_DIR}/include/freetype
		FREETYPE_LIBRARY_DBG=${OGRE_DEPENDENCIES_DIR}/lib/libfreetype.a
		FREETYPE_LIBRARY_REL=${OGRE_DEPENDENCIES_DIR}/lib/libfreetype.a
		FreeImage_INCLUDE_DIR=${OGRE_DEPENDENCIES_DIR}/include
		FreeImage_LIBRARY_DBG=${OGRE_DEPENDENCIES_DIR}/lib/libFreeImage.a
		FreeImage_LIBRARY_REL=${OGRE_DEPENDENCIES_DIR}/lib/libFreeImage.a
		OGRE_DEPENDENCIES_DIR=${OGRE_DEPENDENCIES_DIR}
		OIS_INCLUDE_DIR=${OGRE_DEPENDENCIES_DIR}/include
		OIS_LIBRARY_DBG=${OGRE_DEPENDENCIES_DIR}/lib/libOIS.a
		OIS_LIBRARY_FWK=${OGRE_DEPENDENCIES_DIR}/lib/libOIS.a
		OIS_LIBRARY_REL=${OGRE_DEPENDENCIES_DIR}/lib/libOIS.a
		OPENGLES2_INCLUDE_DIR=${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/${ANDROID_ARCH}/usr/include
		OPENGLES2_gl_LIBRARY=${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/${ANDROID_ARCH}/usr/lib/libGLESv2.so
		OPENGLES_INCLUDE_DIR=${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/${ANDROID_ARCH}/usr/include
		OPENGLES_gl_LIBRARY=${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/${ANDROID_ARCH}/usr/lib/libGLESv1_CM.so
		ZLIB_INCLUDE_DIR=${OGRE_DEPENDENCIES_DIR}/include
		ZLIB_LIBRARY_DBG=${OGRE_DEPENDENCIES_DIR}/lib/libzlib.a
		ZLIB_LIBRARY_REL=${OGRE_DEPENDENCIES_DIR}/lib/libzlib.a
		ZZip_INCLUDE_DIR=${OGRE_DEPENDENCIES_DIR}/include/zzip
		ZZip_LIBRARY_DBG=${OGRE_DEPENDENCIES_DIR}/lib/libzzip.a
		ZZip_LIBRARY_REL=${OGRE_DEPENDENCIES_DIR}/lib/libzzip.a

#		CMAKE_CXX_FLAGS="-march=armv8-a -mfloat-abi=softfp -mfpu=neon -flax-vector-conversions"

#		CMAKE_CXX_FLAGS="-march=armv8-a ${CMAKE_CXX_FLAGS}"

#		cmake $SOURCE_DIR -G"Unix Makefiles" -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}

		echo "*************************************************************"
		echo "*                                                           *"
		echo "* cmake run via script doesn't work.  For some reason the   *"
		echo "* CMAKE_CXX_FLAGS value is getting appended to a path.  It  *"
		echo "* seems like it may be a cmake script error.  Run cmake-gui *"
		echo "* as described in Build_Ogre_Android.txt  You can then      *"
		echo "* build, clean, and install from the buildtool script.      *"
		echo "*                                                           *"
		echo "*************************************************************"

#		exit

		export JAVA_HOME=/usr/java/jdk-10.0.1
		export JAVA_AWT_LIBRARY={$JAVA_HOME}/lib/libawt.so
		export JAVA_JVM_LIBRARY={$JAVA_HOME}/lib/server/libjvm.so
		
		echo "------------------------------------"
		echo "SOURCE_DIR=${SOURCE_DIR}"
		echo "------------------------------------"


#			-DANDROID_NDK_TOOLCHAINS_PATH="${ANDROID_NDK}"
#			-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} \


		cmake $SOURCE_DIR  \
			-Wno-dev \
			-G"Unix Makefiles" \
			-DCMAKE_BUILD_TYPE="RelWithDebInfo" \
			-DCMAKE_INSTALL_PREFIX=${INSTALL_CONFIG_DIR} \
			-DCMAKE_TOOLCHAIN_FILE="${CMAKE_TOOLCHAIN_FILE}" \
			-DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM} \
			-DANDROID_NDK=${ANDROID_NDK} \
			-DANDROID_ABI="${ANDROID_ABI}" \
			-DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL} \
			-DOGRE_DEPENDENCIES_DIR=/home/mhodges/projects/ogre/v1-11/2018_05_12/ogre_build/android/armeabi-v7a/API_19/Release/Dependencies \
#			-DOGRE_BUILD_ANDROID_JNI_SAMPLE=true \



#/home/mhodges/projects/ogre/v1-11/2018_05_12/ogre_build/android/armeabi-v7a/API_19/Release/Dependencies


## IMPORTANT NOTE: The below list of defines is not complete.  For instance,
## ANDROID_NDK_TOOLCHAINS_PATH is missing.  I ran into the weird path problem
## described above, then stopped working on running cmake via script.
#		cmake $SOURCE_DIR -G"Unix Makefiles" \
#			-DCMAKE_BUILD_TYPE="RelWithDebInfo" \
#			-DCMAKE_INSTALL_PREFIX=${INSTALL_CONFIG_DIR} \
#			-DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM} \
#			-DANDROID_NDK=${ANDROID_NDK} \
#			-DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL} \
#			-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} \
#			-DEGL_INCLUDE_DIR=${EGL_INCLUDE_DIR} \
#			-DEGL_egl_LIBRARY=${EGL_egl_LIBRARY} \
#			-DFREETYPE_FT2BUILD_INCLUDE_DIR=${FREETYPE_FT2BUILD_INCLUDE_DIR} \
#			-DFREETYPE_INCLUDE_DIR=${FREETYPE_INCLUDE_DIR} \
#			-DFREETYPE_LIBRARY_DBG=${FREETYPE_LIBRARY_DBG} \
#			-DFREETYPE_LIBRARY_REL=${FREETYPE_LIBRARY_REL} \
#			-DFreeImage_INCLUDE_DIR=${DFreeImage_INCLUDE_DIR} \
#			-DFreeImage_LIBRARY_DBG=${DFreeImage_LIBRARY_DBG} \
#			-DFreeImage_LIBRARY_REL=${DFreeImage_LIBRARY_REL} \
#			-DOGRE_DEPENDENCIES_DIR=${OGRE_DEPENDENCIES_DIR} \
#			-DOIS_INCLUDE_DIR=${OIS_INCLUDE_DIR} \
#			-DOIS_LIBRARY_DBG=${OIS_LIBRARY_DBG} \
#			-DOIS_LIBRARY_FWK=${OIS_LIBRARY_FWK} \
#			-DOIS_LIBRARY_REL=${OIS_LIBRARY_REL} \
#			-DOPENGLES2_INCLUDE_DIR=${OPENGLES2_INCLUDE_DIR} \
#			-DOPENGLES2_gl_LIBRARY=${OPENGLES2_gl_LIBRARY} \
#			-DOPENGLES_INCLUDE_DIR=${OPENGLES_INCLUDE_DIR} \
#			-DOPENGLES_gl_LIBRARY=${OPENGLES_gl_LIBRARY} \
#			-DZLIB_INCLUDE_DIR=${ZLIB_INCLUDE_DIR} \
#			-DZLIB_LIBRARY_DBG=${ZLIB_LIBRARY_DBG} \
#			-DZLIB_LIBRARY_REL=${ZLIB_LIBRARY_REL} \
#			-DZZip_INCLUDE_DIR=${ZZip_INCLUDE_DIR} \
#			-DZZip_LIBRARY_DBG=${ZZip_LIBRARY_DBG} \
#			-DZZip_LIBRARY_REL=${ZZip_LIBRARY_REL}
 
 #cmake $SOURCE_DIR -G"Unix Makefiles" \
#			-DANDROID_NDK="${ANDROID_NDK}" \
#			-DANDROID_NDK_TOOLCHAINS_PATH="${ANDROID_NDK}" \
#			-DCMAKE_TOOLCHAIN_FILE="${CMAKE_TOOLCHAIN_FILE}" \
#			-DCMAKE_MAKE_PROGRAM="${CMAKE_MAKE_PROGRAM}" \
#			-DCMAKE_BUILD_TYPE="Debug" \
#			-DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL}/Debug}" \
#			-DCMAKE_ASM_COMPILER="${CMAKE_ASM_COMPILER}" \
#			-DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS}" \
#			-DCMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS}" \
#			-DANDROID_NDK="${ANDROID_NDK}" \
#			-DANDROID_NDK_TOOLCHAINS_PATH="${ANDROID_NDK}" \
#			-DANDROID_TOOLCHAIN_NAME="${ANDROID_TOOLCHAIN_NAME}" \
#			-DANDROID_ABI="${ANDROID_ABI}" \
#			-DANDROID_NATIVE_API_LEVEL="${ANDROID_NATIVE_API_LEVEL}" \
#			-DANDROID_NDK_HOST_SYSTEM_NAME="${HOST_SYSTEM}" \
#			-DOGRE_DEPENDENCIES_DIR="${OGRE_DEPENDENCIES_DIR}" \
#			-DOGRE_ASSERTMODE="${OGRE_ASSERTMODE}" \
#			-DOGRE_BUILD_COMPONENT_PAGING="${OGRE_BUILD_COMPONENT_PAGING}" \
#			-DOGRE_BUILD_COMPONENT_RTSHADERSYSTEM="${OGRE_BUILD_COMPONENT_RTSHADERSYSTEM}" \
#			-DOGRE_BUILD_COMPONENT_TERRAIN="${OGRE_BUILD_COMPONENT_TERRAIN}" \
#			-DOGRE_BUILD_COMPONENT_VOLUME="${OGRE_BUILD_COMPONENT_VOLUME}" \
#			-DOGRE_BUILD_PLATFORM_ANDROID=1 \
#			-DOGRE_BUILD_PLUGIN_BSP="${OGRE_BUILD_PLUGIN_BSP}" \
#			-DOGRE_BUILD_PLUGIN_OCTREE="${OGRE_BUILD_PLUGIN_OCTREE}" \
#			-DOGRE_BUILD_PLUGIN_PCZ="${OGRE_BUILD_PLUGIN_PCZ}" \
#			-DOGRE_BUILD_PLUGIN_PFX="${OGRE_BUILD_PLUGIN_PFX}" \
#			-DOGRE_BUILD_RENDERSYSTEM_GLES2="${OGRE_BUILD_RENDERSYSTEM_GLES2}" \
#			-DOGRE_BUILD_TOOLS="${OGRE_BUILD_TOOLS}" \
#			-DOGRE_INSTALL_DOCS="${OGRE_INSTALL_DOCS}" \
#			-DOGRE_INSTALL_SAMPLES="${OGRE_INSTALL_SAMPLES}" \
#			-DOGRE_INSTALL_TOOLS="${OGRE_INSTALL_TOOLS}" \
#			-DOGRE_SDK="${INSTALL_DIR}" \
#			-DOGRE_SOURCE="${OGRE_SOURCE}" \
#			-DOGRE_STATIC="${OGRE_STATIC}" \
#			-DOGRE_SIMD_NEON="${OGRE_SIMD_NEON}" \
#			-DOGRE_SIMD_SSE2="${DOGRE_SIMD_SSE2}" \
#			-DOIS_HOME="${OIS_HOME}" \
#			-DFREEIMAGE_HOME="${FREEIMAGE_HOME}" \
#			-DFREETYPE_HOME="${FREETYPE_HOME}" \
#			-DZLIB_HOME="${ZLIB_HOME}" \
#			-DZZIP_HOME="${ZZIP_HOME}" \
#			-DZLIB_FOUND="${ZLIB_FOUND}" \
#			-DZLIB_INCLUDE_DIRS="${ZLIB_INCLUDE_DIRS}" \
#			-DZLIB_LIBRARIES="${ZLIB_LIBRARIES}" \
#			-DZZip_FOUND="${ZLIB_FOUND}" \
#			-DZZip_INCLUDE_DIRS="${ZLIB_INCLUDE_DIRS}" \
#			-DZZip_LIBRARIES="${ZLIB_LIBRARIES}" \
#			-DOIS_FOUND="${OIS_FOUND}" \
#			-DOIS_INCLUDE_DIR="${OIS_INCLUDE_DIR}" \
#			-DOIS_INCLUDE_DIRS="${OIS_INCLUDE_DIRS}" \
#			-DOIS_LIBRARIES="${OIS_LIBRARIES}" \
#			-DFREETYPE_FOUND="${FREETYPE_FOUND}" \
#			-DFREETYPE_INCLUDE_DIRS="${FREETYPE_INCLUDE_DIRS}" \
#			-DFREETYPE_LIBRARIES="${FREETYPE_LIBRARIES}" \
#			-DFREETYPE_FT2BUILD_INCLUDE_DIR="${FREETYPE_FT2BUILD_INCLUDE_DIR}" \
#			-DFreeImage_FOUND="${FreeImage_FOUND}" \
#			-DFreeImage_INCLUDE_DIRS="${FreeImage_INCLUDE_DIRS}" \
#			-DFreeImage_LIBRARIES="${FreeImage_LIBRARIES}"
	fi
}



# =============================================================================
#                           ValidateOptions
# =============================================================================
function ValidateOptions()
{
	ERROR_OCCURED=0
	case $ANDROID_ABI in
		armeabi-v7a)
			ANDROID_ABI=armeabi-v7a
			CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -march=armv7-a"
			#CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -mfloat-abi=softfp -mfpu=neon"
			ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.9
			ANDROID_ARCH="arch-arm"
			;;
		arm64-v8a)
			if [[ $ANDROID_NATIVE_API_LEVEL -lt 21 ]]; then
				echo "Error: When building for arm64-v8a, API level must be at least 21."
				ERROR_OCCURED=1
			fi
			ANDROID_ABI=arm64-v8a
			CMAKE_CXX_FLAGS="-march=armv8-a ${CMAKE_CXX_FLAGS}"
			ANDROID_TOOLCHAIN_NAME=aarch64-linux-android-4.9
			ANDROID_ARCH="arch-arm64"
			;;
		*)
			echo "ERROR: -abi must be set to: armeabi-v7a, or arm64-v8a"
			ERROR_OCCURED=1
			;;
	esac

	if [[ -z $ANDROID_NATIVE_API_LEVEL ]]; then
        echo "ERROR: -api must be specified."
		ERROR_OCCURED=1
    fi
    if [[ -z $BUILD_CONFIG ]]; then   # If string empty...
        echo "ERROR: You must include a BUILD_CONFIG before a command.  Valid BUILD_CONFIGs are Debug and Release."
		ERROR_OCCURED=1
    fi
    if [[ $BUILD_CONFIG == "debug" ]]; then
        BUILD_CONFIG="Debug"
    fi
    if [[ $BUILD_CONFIG == "release" ]]; then
        BUILD_CONFIG="Release"
    fi
    if [[ $BUILD_CONFIG != "Debug" ]] && [[ $BUILD_CONFIG != "Release" ]]; then
        echo "ERROR: You must include a BUILD_CONFIG before a command.  Valid BUILD_CONFIGs are Debug and Release."
		ERROR_OCCURED=1
    fi
	if [[ $ERROR_OCCURED -eq 1 ]]; then
		echo "Exiting"
		exit
	fi

	BUILD_CONFIG_DIR=$BUILD_DIR/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL}/$BUILD_CONFIG
	INSTALL_CONFIG_DIR=$INSTALL_DIR/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL}/$BUILD_CONFIG
#	OGRE_DEPENDENCIES_DIR=$OGREDEPS_ROOT/ogredeps_sdk/$TARGET_PLATFORM/$ANDROID_ABI/API_${ANDROID_NATIVE_API_LEVEL}/Release
}

# =============================================================================
#                                       Main
# =============================================================================

# Verify this script is being run from the correct location.
if [ ! -d $PROJ_DIR/$PROJ_NAME ]; then
    echo "FATAL ERROR: This script must be executed in the parent folder of $PROJ_NAME/.  Aborting."
    exit
fi

# If no params, display help.
if [ "$#" -eq 0 ]
then
    echoHelp;
    exit
fi


OPTION_CMAKE=0
OPTION_CLEAN=0
OPTION_BUILD=0
OPTION_INSTALL=0
OPTION_REDIRECT_OUTPUT=0

while [[ $# > 0 ]]
do
	key="$1"
	case $key in
		-m|--cmake)
			OPTION_CMAKE=1
			;;
		-c|--clean)
			OPTION_CLEAN=1
			;;
		-b|--build)
			OPTION_BUILD=1
			;;
		-i|--install)
			OPTION_INSTALL=1
			;;
		-abi)
			ANDROID_ABI="$2"
			shift # past argument
			;;
		-api)
			ANDROID_NATIVE_API_LEVEL="$2"
			shift # past argument
			;;
		-ndk)
			ANDROID_NDK="$2"
			shift # past argument
			;;
		-config)
			BUILD_CONFIG="$2"
			shift # past argument
			;;
		-redir)
			OPTION_REDIRECT_OUTPUT=1
			;;
		*)
			# unknown option
			echo "ERROR: Unrocognized option: ${key}"
			echo "BUILD_CONFIG = ${BUILD_CONFIG}"
			echo 
			echoHelp
			exit
			;;
	esac
	shift # past argument or value
done

if [[ $OPTION_CMAKE == 1 ]]; then
	func_cmake
fi
if [[ $OPTION_CLEAN == 1 ]]; then
	func_clean
fi
if [[ $OPTION_BUILD == 1 ]]; then
	func_build
fi
if [[ $OPTION_INSTALL == 1 ]]; then
	func_install
fi

