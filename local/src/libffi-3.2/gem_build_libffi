#!/bin/bash
#  ___________                           __________
# /\   _______\                         /\   ______\
# \ \  \______/_     ___   ____ ____ ___\ \  \_____/_     ___   ___ ___  ______    ___    ___
#  \ \  \ /\__  \  /'___`\/\   V    V   \\ \_______  \  /'   `\/\  \\  \/\   __\/' ._`\ /'___`\
#   \ \  \\/__\  \/\  ___/\ \  \/\  \/\  \\/_______\  \/\  \\  \ \  \\  \ \  \ /\  \__//\  ___/
#    \ \__________\ \____\ \ \__\ \__\ \__\ /\_________\ \_____/\ \______\ \__\\ \____/\ \____\
#     \/__________/\/____/  \/__/\/__/\/__/ \/_________/\/____/  \/______/\/__/ \/___/  \/____/


. gem_script
. gem_build

function gem_v_SetDefaults
{
	gem_build_SetDefaults;

	gem_download_src=1

	# Need gnu extensions for compile asm code.
	gem_c_standard="-std=c99"	# c90, c99, c11, gnu90, gnu99, gnu11

#	gem_build_script="cmake"
	gem_build_script="autotools"
#	gem_build_script="meson"

	# Common Defaults
	if [[ $(uname -s) == "MINGW64"* ]]; then	# MinGW shell on Windows.
		gem_host=mingw
#		gem_host=msvc
	elif [[ $(uname -s) == "Linux"* ]]; then	# Linux shell.
		gem_host=linux
#		gem_host=mingw
#		gem_host=android_arm64_v8a
	fi

	gem_build_type=release
#	gem_build_type=debug

	gem_flags_configure=
	gem_flags_c=
	gem_flags_cpp=
	gem_flags_cxx=
	gem_flags_ld=


	gem_filename_pkg=libffi
	gem_filename_version=3.2
	gem_filename_exten=tar.gz
	gem_filename_base=${gem_filename_pkg}-${gem_filename_version}
	gem_filename_archive=${gem_filename_base}.${gem_filename_exten}
	gem_filename_url=ftp://sourceware.org/pub/libffi/${gem_filename_archive}
}

function gem_v_DownloadSource
{
	# Download
	if [[ ! -f ${gem_filename_archive} ]]; then
		wget -c ${gem_filename_url}
		if [[ $? != 0 ]]; then
			gem_v_Error "ERROR: gem_v_DownloadSource: wget failed to download source archive: ${gem_filename_url}"
		fi
	fi
	# Decompress
	if [[ -d ${gem_fullpath_src} ]]; then
		gem_v_Msg "ALERT: src directory already exists.  Archive not uncompressed."
	else
		gem_script_mkdir -p ${gem_fullpath_src}
		gem_flags_tar="<undefined>"
		if [[ ${gem_filename_exten} == *".gz"* ]]; then
			gem_flags_tar="xzf"
		elif  [[ ${gem_filename_exten} == *".xz"* ]]; then
			gem_flags_tar="xf"
		fi
		if [[ ${gem_flags_tar} == "<undefined>" ]]; then
			gem_v_Error "ERROR: gem_v_DownloadSource: Unable to decompress downloaded file with extension \"${gem_filename_exten}\"."
		fi
		tar -${gem_flags_tar} ${gem_filename_archive} -C ${gem_fullpath_src}
		if [[ $? != 0 ]]; then
			gem_v_Error "ERROR: gem_v_DownloadSource: Failed to uncompress the source archive: ${gem_filename_archive}"
		fi
		gem_script_cp -rf ${gem_fullpath_src}/${gem_filename_base}/* ${gem_fullpath_src}
		gem_script_rm -rf ${gem_fullpath_src}/${gem_filename_base}
	fi

	pushd ${gem_fullpath_src}
	# Correct for library being put into a lib64 directory instead of the correct
	# lib directory.  Source: https://ghc.haskell.org/trac/ghc/ticket/9620
	sed 's:@toolexeclibdir@:$(libdir):g' -i Makefile.in

	# Make package install headers into the conventional ${PREFIX}/include instead
	# of ${PREFIX}/lib/libffi-3.2.1/include.
	# Source: http://zwyuan.github.io/2016/07/17/cross-compile-glib-for-android/
	sed -e '/^includesdir/ s/$(libdir).*$/$(includedir)/' -i include/Makefile.in
	sed -e '/^includedir/ s/=.*$/=@includedir@/' -e 's/^Cflags: -I${includedir}/Cflags:/' -i libffi.pc.in
	popd

	gem_build_DownloadSource
}

function gem_v_OnConfigure
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")

	gem_flags_configure="${gem_flags_configure}"

	gem_v_DebugDumpVars
	gem_build_OnConfigure
}

function gem_v_build_CommandLine_Build
{
	gem_build_CommandLine_Build
#	printf "\ngem_cmd_line_build=\n\n${gem_cmd_line_build}\n\n"
}

function gem_v_OnBuild
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_v_DebugDumpVars
	gem_build_OnBuild
}

function gem_v_OnInstall
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_build_OnInstall


}

function gem_v_OnUninstall
{
	gem_build_OnUninstall
}

function gem_v_OnClean
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_build_Cmd_OnClean
}

# =============================================================================
#                                       gem_Main
# =============================================================================
function gem_v_OnArg
{
	arg=$(echo ${1} | tr '[A-Z]' '[a-z]')	# Lowercase args.
	case ${arg} in
		*)	gem_build_OnArg "$@" ;	return $?
	esac
}


function gem_v_Main
{
	gem_build_Main "$@"
}

gem_v_Main $@
