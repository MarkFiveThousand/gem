#!/bin/bash
#  ___________                           __________
# /\   _______\                         /\   ______\
# \ \  \______/_     ___   ____ ____ ___\ \  \_____/_     ___   ___ ___  ______    ___    ___
#  \ \  \ /\__  \  /'___`\/\   V    V   \\ \_______  \  /'   `\/\  \\  \/\   __\/' ._`\ /'___`\
#   \ \  \\/__\  \/\  ___/\ \  \/\  \/\  \\/_______\  \/\  \\  \ \  \\  \ \  \ /\  \__//\  ___/
#    \ \__________\ \____\ \ \__\ \__\ \__\ /\_________\ \_____/\ \______\ \__\\ \____/\ \____\
#     \/__________/\/____/  \/__/\/__/\/__/ \/_________/\/____/  \/______/\/__/ \/___/  \/____/


# Detailed Source: http://soc.if.usp.br/manual/libglib2.0-doc/glib/glib-building.html

. gem_script
. gem_build

function gem_v_SetDefaults
{
	gem_build_SetDefaults;

	gem_c_standard="-std=gnu11"	# c90, c99, c11, gnu90, gnu99, gnu11

#	gem_build_script="cmake"
#	gem_build_script="autotools"
	gem_build_script="meson"

	# Common Defaults
	if [[ ${gem_os} == *"MINGW64"* ]]; then	# MinGW shell on Windows.
		gem_host=mingw
#		gem_host=msvc
	elif [[ ${gem_os} == "CYGWIN"* ]]; then		# Cygwin shell on Windows.
		gem_host=cygwin
#		gem_host=mingw
	elif [[ ${gem_os} == *"Linux"* ]]; then	# Linux shell.
		gem_host=linux
#		gem_host=mingw
#		gem_host=android_arm64_v8a
	fi

	gem_build_type=release
#	gem_build_type=debug

	# SEE CONFIGURATION OPTIONS:
	# https://developer.gnome.org/glib/stable/glib-building.html

	# The following settings are available:
	#
	# bsymbolic_functions
	# charsetalias_dir
	# dtrace
	# force_posix_threads
	# fam
	# gio_module_dir
	# gtk_doc
	# installed_tests
	# iconv
	# internal_pcre
	# libmount
	# man
	# nls
	# runtime_libdir
	# selinux
	# systemtap
	# tapset_install_dir
	# xattr

	# The package url must be in the following format:
	# <url parent>/<package name>-<version>.tar.<extension>
	gem_filename_url=http://ftp.gnome.org/pub/gnome/sources/glib/2.63/glib-2.63.0.tar.xz

	# Set build flags.
	gem_flags_configure="\
-Dinternal_pcre=true \
-Dgtk_doc=false \
-Dman=false \
-Dlibmount=false \
${gem_flags_configure}"

	gem_flags_c="${gem_flags_c}"
	gem_flags_cpp="${gem_flags_cpp}"
	gem_flags_cxx="${gem_flags_cxx}"
	gem_flags_ld="${gem_flags_ld}"
	gem_flags_common="${gem_flags_common}"
}

function gem_v_DownloadSource
{
	gem_build_DownloadSource
}

function gem_v_OnConfigure
{
	gem_v_DebugDumpVars
	gem_build_OnConfigure
}

function gem_v_build_CommandLine_Build
{
	gem_build_CommandLine_Build
}

function gem_v_OnBuild
{
	gem_v_DebugDumpVars
	gem_build_OnBuild
}

function gem_v_OnInstall
{
	gem_build_OnInstall
}

function gem_v_OnUninstall
{
	gem_build_OnUninstall

	gem_fullpath_share=${gem_fullpath_install}/share
	gem_fullpath_share_locale=${gem_fullpath_share}/locale

	gem_strlist_locales="af am an ar as ast az be be@latin bg bn bn_IN bs ca ca@valencia cs cy da de dz el en_CA en_GB en@shaw eo es et eu fa fi fr fur ga gd gl gu he hi hr hu hy id is it ja ka kk kn ko ku lt lv mai mg mk ml mn mr ms nb nds ne nl nn oc or pa pl ps pt pt_BR ro ru rw si sk sl sq sr sr@ije sr@latin sv ta te tg th tl tr tt ug uk vi wa xh yi zh_CN zh_HK zh_TW"
	for locale in ${gem_strlist_locales}; do
		gem_fullpath_locale=${gem_fullpath_share_locale}/${locale}
		gem_fullpath_lcmessages=${gem_fullpath_locale}/LC_MESSAGES

		gem_script_rm -f ${gem_fullpath_lcmessages}/glib20.mo

		gem_script_rmdir_IfEmpty ${gem_fullpath_lcmessages}
		gem_script_rmdir_IfEmpty ${gem_fullpath_locale}
	done
	gem_script_rmdir_IfEmpty ${gem_fullpath_share_locale}
	gem_script_rmdir_IfEmpty ${gem_fullpath_share}
}

function gem_v_OnClean
{
	gem_build_Cmd_OnClean
}

# =============================================================================
#                                       gem_Main
# =============================================================================
function gem_v_OnArg
{
	arg=$(echo ${1} | tr '[A-Z]' '[a-z]')	# Lowercase args.
	case ${arg} in
		*)	gem_build_OnArg "$@" ;	return $?
	esac
}


function gem_v_Main
{
	gem_build_Main "$@"
}
gem_v_Main $@
