#!/bin/bash

# =============================================================================
# Visibility
#
# Symbol visibility is handled during linking, and the linker doesn't seem to
# impose it on static archives.
#
# Source: http://stackoverflow.com/questions/2222162/how-to-apply-gcc-fvisibility-option-to-symbols-in-static-libraries



# Linker Options:
FIND_SO_IN_THIS_DIR=-Wl,-rpath=./		# Linker option embeds .so location in the
										# executable.  Only required while linking
										# the executable.
# Platform Vars
CROSS_COMPILE_MINGW_ON_LINUX=0

if [[ $(uname -s) == "MINGW64_NT-10.0" ]] || [[ $CROSS_COMPILE_MINGW_ON_LINUX == 1 ]]; then
	printf "Building for MinGW...\n"
	GNU_COMPILER=x86_64-w64-mingw32-g++		# Works on MinGW and Cross compiling on Linux.
	EXECUTABLE_FILE_EXT=.exe
else
	printf "Building for Linux...\n"
	GNU_COMPILER=g++
fi

# Clean
rm -f main main.exe staticlib.so static.o



# Compile the library source to .o
$GNU_COMPILER -c staticlib.cpp

# Build the library source .o to a static library, staticlib.a.
ar rcs staticlib.a staticlib.o

# Build main and static link the library.
$GNU_COMPILER main.cpp staticlib.a -o main${EXECUTABLE_FILE_EXT}




exit 1

# Compile shared.cpp into shared.o.  Hide symbols here.
$GNU_COMPILER -fPIC -c -g -Wall -Werror -DSO_BUILDING static.cpp $HIDE_ALL_SYMBOLS

# Create a shared library named libshared.so.  Too late to hide symbols here.
$GNU_COMPILER -fPIC -shared -o libshared.so shared.o -DSO_BUILDING

# Compile main.cpp into main executable.  Tell linker where to find the .so.
# Do include "lib" prefix. Do *not* use -l option because you are using -rpath,
# so no need to search standard library directories.
$GNU_COMPILER -g -Wall -Werror main.cpp -o main${EXECUTABLE_FILE_EXT} libshared.so $FIND_SO_IN_THIS_DIR





