#!/bin/bash

# To build a custom standalone toolchain run:
#
# ${HOME}/Android/toolchains/buildtoolchain
#
# Options:
#
# ARCH:  arm | arm64 | x86 | x86_64
# STL:   gnustl | libc++ | stlport


function gem_UserSetDefaults
{
	# Directories
	gem_fullpath_local=${HOME}/gem/local
	gem_fullpath_android=${HOME}/android

	gem_fullpath_android_sdk=${gem_fullpath_android}/Sdk
	# gem_fullpath_install is set further below in function gem_BuildFilePaths().

	if [[ ${gem_path_suffix}x == "x" ]]; then
		gem_Msg "bad"
	else
		gem_Msg "good"
	fi
exit # Why is gem_fullpath_install being set below?  This should be removed.  I
	 # just can't verify that it works, at the moment.  I believe it should be
	 # fine to remove here, as its being set further below.

	gem_fullpath_install=${gem_fullpath_local}_${gem_path_suffix}
	gem_fullpath_android_standalone_toolchain_root=${gem_fullpath_android}/standalone-toolchains/
	PKG_CONFIG_PATH=${gem_fullpath_local}/lib/pkgconfig
	
	# Common Defaults
#	gem_host=mingw
#	gem_host=linux
	gem_host=android_arm64_v8a

	gem_build_type=release
#	gem_build_type=debug

	# Android Defaults
	# The ndk version needs to be passed to cmake.  We're currently parsing it from
	# ANDROID_NDK, which I'm not even sure if we're using, otherwise.
#	gem_android_ndk_version=17b
	gem_android_ndk_version=18b

	gem_android_api_level=28
	gem_android_standalone_toolchain_stl=libc++
	
	# Application Defaults
	gem_filename_project_exe=cmake_executable
	gem_adb_exe=${gem_fullpath_android_sdk}/platform-tools/adb
}

function gem_BuildFilePaths
{
	gem_path_suffix=${gem_platform_host}${gem_platform_host_details_suffix}/${gem_build_type}
	gem_fullpath_src=$(pwd)/src
	gem_fullpath_build=$(pwd)/build/${gem_path_suffix}
	gem_fullpath_install=${gem_fullpath_local}_${gem_path_suffix}
	gem_ValidateFilePaths
}

function gem_ValidateFilePaths
{
	if [[ ! -d ${gem_fullpath_src} ]]; then
		gem_ExitMsg "src/ directory not found at: ${gem_fullpath_src}"
	fi
	if [[ ! -f ${gem_filename_cmake_toolchain} ]]; then
		gem_ExitMsg "CMake toolchain file not found at: ${gem_filename_cmake_toolchain}"
	fi
	if [[ ${gem_host} == *"android"* && 
		  ! -d ${gem_fullpath_android_standalone_toolchain}/sysroot ]]; then
		gem_ExitMsg "Standalone toolchain directory not found at: ${gem_fullpath_android_standalone_toolchain}"
	fi
}

function gem_DebugDumpVars
{
	gem_Msg "- buildtool -------------------------------------------------------------------"
	printf "gem_host =             ${gem_host}\n"
	printf "gem_build_type =       ${gem_build_type}\n"
	printf "gem_path_suffix =      ${gem_path_suffix}\n"
	printf "gem_platform_host =    ${gem_platform_host}\n"
	printf "gem_platform_host_details_suffix = ${gem_platform_host_details_suffix}\n"
	printf "gem_fullpath_src =     ${gem_fullpath_src}\n"
	printf "gem_fullpath_build =   ${gem_fullpath_build}\n"
	printf "gem_fullpath_install = ${gem_fullpath_install}\n"
	if [[ ${gem_host} == *"android"* ]]; then
		printf "gem_android_ndk_version =  ${gem_android_ndk_version}\n"
		printf "gem_android_api_level =	   ${gem_android_api_level}\n"
		printf "gem_android_standalone_toolchain_stl =	${gem_android_standalone_toolchain_stl}\n"
		printf "gem_android_standalone_toolchain_arch =	${gem_android_standalone_toolchain_arch}\n"
		printf "gem_fullpath_android_standalone_toolchain=${gem_fullpath_android_standalone_toolchain}\n"
		printf "gem_filename_cmake_toolchain=${gem_filename_cmake_toolchain}\n"
	fi
	gem_Msg "--------------------------------------------------------------------------------"
}

# =============================================================================
# Utility Functions
# =============================================================================
function gem_Msg()
{
	if [[ ! -z "${1}" ]]; then
		printf "%s\n" "${1}"
	fi
}

function gem_ExitMsg()
{
	gem_Msg "${1}"
	exit 1
}

function gem_ExitHelp()
{
	printf "=============================================================================\n"
	printf "IMPORTANT: This script must be located in the parent of the source tree.\n"
	printf "\n"
	printf "FILE STRUCTURE:\n"
	printf "\n"
	printf "    EXAMPLE:\n"
	printf "        my_project/       Parent of source tree.  This build script must be here.\n"
	printf "            bin/          Install location\n"
	printf "            build/        Object files\n"
	printf "            lib/          Library files\n"
	printf "            src/          Source tree\n"
	printf "\n"
	printf "Usage: $(basename ${0}) <build type> <host target> <commands>\n\n"
	printf "Commands:\n\n"
	printf "  -m           configure or cmake\n"
	printf "  -b           build\n"
	printf "  -c           clean\n"
	printf "  -i           install\n"
	printf "  -r           run\n"
	printf "  -p           build CPack installer.\n"
	printf "  -redir       redirect output to a file.\n\n"
	printf "Host target:\n\n"
	printf "  -target      {linux | mingw | msvc | android_x86 | android_v7vfpv3 | \n"
	printf "                android_arm_v7_plus_neon | android_arm64_v8a}\n\n"
	printf "Build type:\n\n"
	printf "  -type        {debug|release|relwithdebinfo}\n\n"
	printf "Install directory:\n\n"
	printf "  -install     Directory in which to install.\n"
	printf "               Default: ${gem_fullpath_install}\n"
	printf "Android:\n\n"
	printf "  -android-standalone Path to android stand alone toolchain.\n"
	printf "                      Default: ${gem_fullpath_android_standalone_toolchain}\n\n"
	printf "  -android-api        Android api.\n"
	printf "                      Default: ${gem_android_api_level}\n\n"
	printf "Examples of common usage:\n"
	printf "\n"
	printf "    \$ ./buildtool -target linux -type debug -c -m -b -i\n"
	printf "    \$ ./buildtool -target android_arm64_v8a -type release -m\n"
	printf "    \$ ./buildtool -target mingw -type release -m\n"
	printf "\n"
	printf "=============================================================================\n"
	gem_ExitMsg "${1}"
}


# =============================================================================
#                          Configure Build Platform
# =============================================================================
function gem_ConfigureTargetCommon
{
	gem_BuildFilePaths
}

function gem_ConfigureTarget_linux
{
	gem_filename_cmake_toolchain=${gem_fullpath_local}/toolchains/linux.toolchain.cmake
	gem_platform_host=x86_64-pc-linux-gnu
	gem_ConfigureTargetCommon
}

function gem_ConfigureTarget_mingw
{
	gem_filename_cmake_toolchain=${gem_fullpath_local}/toolchains/mingw.toolchain.cmake
	gem_platform_host=x86_64-w64-mingw32
	gem_ConfigureTargetCommon
}

function gem_ConfigureTarget_msvc
{
	gem_filename_cmake_toolchain=${gem_fullpath_local}/toolchains/mingw.toolchain.cmake
	gem_platform_host=x86_64-pc-windows-msvc
	gem_ConfigureTargetCommon
}

function gem_ConfigureTargetCommon_android
{
	gem_platform_host_details_suffix=_ndk_${gem_android_ndk_version}_api_${gem_android_api_level}_stl_${gem_android_standalone_toolchain_stl}_arch_${gem_android_standalone_toolchain_arch}
#	gem_platform_host_details_suffix=_api_${gem_android_api_level}_abi_${gem_host:8}

	gem_fullpath_android_standalone_toolchain=\
${gem_fullpath_android_standalone_toolchain_root}\
ndk_${gem_android_ndk_version}_\
api_${gem_android_api_level}_\
stl_${gem_android_standalone_toolchain_stl}_\
arch_${gem_android_standalone_toolchain_arch}

#	gem_filename_cmake_toolchain=${gem_fullpath_local}/toolchains/android.toolchain.cmake
	gem_filename_cmake_toolchain=${gem_fullpath_android}/android-ndk-r${gem_android_ndk_version}/build/cmake/android.toolchain.cmake
	gem_ConfigureTargetCommon
}

function gem_ConfigureTarget_android_x86_64
{
	gem_platform_host=x86_64-linux-android
	gem_android_abi=x86_64
	gem_android_standalone_toolchain_arch=x86_64
	gem_ConfigureTargetCommon_android
}

function gem_ConfigureTarget_android_v7vfpv3
{
	gem_platform_host=arm-linux-androideabi
	gem_android_abi=armeabi-v7a
	gem_android_standalone_toolchain_arch=arm
	gem_ConfigureTargetCommon_android
}

function gem_ConfigureTarget_android_arm_v7_plus_neon
{
	gem_platform_host=arm-linux-androideabi
	gem_android_abi="armeabi-v7a with NEON"
	gem_android_standalone_toolchain_arch=arm
	gem_ConfigureTargetCommon_android
}

function gem_ConfigureTarget_android_arm64_v8a
{
	gem_platform_host=aarch64-linux-android
	gem_android_abi=arm64-v8a
	gem_android_standalone_toolchain_arch=arm64
	gem_ConfigureTargetCommon_android
}


# =============================================================================
#                                   Commands
# =============================================================================
function gem_CmdCMake()
{
	# Clean build directory.
	if [[ ${gem_fullpath_build}x == "x" ]]; then
		gem_ExitMsg "gem_fullpath_build not defined in $(basename ${0})."
	fi
	if [[ -d ${gem_fullpath_build} ]]; then
		rm -rf ${gem_fullpath_build}/*
	else
		mkdir -p ${gem_fullpath_build}
	fi

	cd ${gem_fullpath_build}

	if [[ ${gem_host} == *"android"* ]]; then
		gem_cmake_params_extra="\
			-DANDROID_ABI=${gem_android_abi} \
			-DANDROID_NATIVE_API_LEVEL=${gem_android_api_level} \
			-DCMAKE_ANDROID_STANDALONE_TOOLCHAIN=${gem_fullpath_android_standalone_toolchain} \
			-DANDROID_NDK=${gem_fullpath_android}/android-ndk-r${gem_android_ndk_version} \
			"
#			-DCMAKE_SYSROOT=${gem_fullpath_android_standalone_toolchain}/sysroot
	elif [[ ${gem_host} == *"msvc"* ]]; then
		# Source: https://cmake.org/cmake/help/latest/generator/Visual%20Studio%2015%202017.html
#			-T host=x64 # Use 64-bit tools.
#			-A x64 \	# Generates an error: Generator Visual Studio 15 2017
						# Win64 does not support platform specification, but
						# platform x64 was specified.
		gem_cmake_params_extra=" \
#			-T host=x64 \
			-A x64 \
			"
	fi

	gem_cmake_parms="${gem_cmake_generator} \
		-DCMAKE_TOOLCHAIN_FILE=${gem_filename_cmake_toolchain} \
		-DCMAKE_BUILD_TYPE=${gem_build_type} \
		-DCMAKE_INSTALL_PREFIX=${gem_fullpath_install} \
		-Dgem_host=${gem_host} \
		${gem_cmake_params_extra} \
		"

#	gem_cmake_parms="--debug-trycompile ${gem_cmake_parms}"

	eval "cmake ${gem_fullpath_src} ${gem_cmake_parms} ${gem_redirect_suffix_config}"

	if [[ ${gem_option_redirect_output} == 1 ]]; then
		printf "\nPossible errors detected:\n"
		grep -i -s -e error -e fail ${gem_filename_log_config}
		gem_result=$?
		if [[ ${gem_result} -eq 0 ]]; then
			printf "None.\n"
		fi
	fi
}

# =============================================================================
#                                     Build
# =============================================================================

function gem_CmdBuild()
{
	cd ${gem_fullpath_build}

	cmake --build . --config "${gem_build_type}"
}

# =============================================================================
#                                     Run
# =============================================================================

function gem_CmdRunLinuxAndMinGW()
{
	cd ${gem_fullpath_build}

	# Build path to the executable.
	gem_fullpath_exe=${gem_fullpath_build}/bin
	if [[ ${gem_host} == *"msvc"* ]]; then
		gem_fullpath_exe=${gem_fullpath_exe}/${gem_build_type}
	fi
	gem_fullpath_exe=${gem_fullpath_exe}/${gem_filename_project_exe}
	if [[ ${gem_host} == *"mingw"* || ${gem_host} == *"msvc"* ]]; then
		gem_fullpath_exe=${gem_fullpath_exe}.exe
	fi
	if [[ ! -f ${gem_fullpath_exe} ]]; then
		gem_ExitMsg "ERROR: Can't find built executable: ${gem_fullpath_exe}"
	fi
	gem_Msg "--------------------------------------------------------------------------------"
	${gem_fullpath_exe}
	gem_Msg "--------------------------------------------------------------------------------"
}

function gem_CmdRunAndroid()
{
	cd ${gem_fullpath_build}

	gem_fullpath_exe=${gem_fullpath_build}/bin/${gem_filename_project_exe}
	if [[ ! -f ${gem_fullpath_exe} ]]; then
		gem_ExitMsg "ERROR: Can't find built executable: ${gem_fullpath_exe}"
	fi

#	${gem_adb_exe} kill-server
#	${gem_adb_exe} start-server
	${gem_adb_exe} devices 1>/dev/null

	gem_device_path_dest_tmp=/data/local/tmp
	gem_device_shell_cmd="${gem_adb_exe} push ${gem_fullpath_exe} ${gem_device_path_dest_tmp}"
	${gem_device_shell_cmd} 1>/dev/null
	gem_result=$?
	if [[ ${gem_result} -ne 0 ]]; then
		gem_ExitMsg "adb push failed.  Returned: ${gem_result}"
	fi
	
	gem_device_fullpath_exe=${gem_device_path_dest_tmp}/${gem_filename_project_exe}
	gem_device_shell_cmd="${gem_adb_exe} shell ${gem_device_fullpath_exe}"
	gem_Msg "--------------------------------------------------------------------------------"
	${gem_device_shell_cmd}
	gem_result=$?
	gem_Msg "--------------------------------------------------------------------------------"
	if [[ ${gem_result} -ne 0 ]]; then
		gem_Msg "Device shell command failed.  Command was:"
		gem_ExitMsg "${gem_device_shell_cmd}"
	fi
}

# =============================================================================
#                                      Install
# =============================================================================
function gem_CmdInstall()
{
	cd ${gem_fullpath_build}

	cmake --build . --target install
}

# =============================================================================
#                                      Clean
# =============================================================================
function gem_CmdClean()
{
	cd ${gem_fullpath_build}

}

# =============================================================================
#                                      CPack
# =============================================================================
function gem_CmdCPack()
{
	cd ${gem_fullpath_build}

	cpack --config CPackConfig.cmake
}


# =============================================================================
#                                       gem_Main
# =============================================================================
function gem_Main()
{
	gem_time_start=$(( 10#$(date +%s) ))

	gem_UserSetDefaults

	gem_option_cmake=0
	gem_option_clean=0
	gem_option_build=0
	gem_option_install=0
	gem_option_run=0
	gem_option_pack=0
	gem_option_redirect_output=0
	gem_error_msg=""
	gem_cmake_generator="undefined"

	while [[ $# > 0 ]]
	do
		arg=`echo ${1} | tr '[A-Z]' '[a-z]'`	# Lowercase args.
		case ${arg} in
			-m)	gem_option_cmake=1   ;;
			-c)	gem_option_clean=1   ;;
			-b)	gem_option_build=1   ;;
			-r)	gem_option_run=1     ;;
			-i)	gem_option_install=1 ;;
			-p)	gem_option_pack=1    ;;
			-redir)	gem_option_redirect_output=1 ;;
			-target)
				case ${2} in
					linux|mingw|android_x86_64|android_v7vfpv3|android_arm_v7_plus_neon|android_arm64_v8a)
						gem_host=${2}
						gem_cmake_generator="-G\"Unix Makefiles\"" ;;
					msvc)
						gem_host=${2}
						gem_cmake_generator="-G\"Visual Studio 15 2017 Win64\"" ;;
					*)	gem_error_msg="ERROR: Invalid build target: ${2}"
						return
				esac
				shift ;;
			-android-standalone)
				gem_fullpath_android_standalone_toolchain=${2}
				shift ;;
			-android-api)
				gem_android_api_level=${2}
				shift ;;
			-install)
				gem_fullpath_install=${2}
				shift ;;
			-type)
				case ${2} in
					debug)
						gem_build_type=Debug ;;
					release)
						gem_build_type=Release ;;
					relwithdebinfo)
						gem_build_type=RelWithDebInfo ;;
					*)	gem_error_msg="ERROR: Invalid build configuration: ${2}"
						return
				esac
				shift ;;
			*)	gem_error_msg="ERROR: Unrecognized option: ${arg}"; return
		esac
		shift # past argument or value.
	done

	gem_ConfigureTarget_${gem_host}
	gem_DebugDumpVars

	if [[ ${gem_option_redirect_output} == 1 ]]; then
		gem_filename_log_build=${gem_fullpath_build}/gem_log_build.txt
		gem_filename_log_config=${gem_fullpath_build}/gem_log_config.txt
		gem_redirect_suffix_config=" 2>&1 | tee ${gem_filename_log_config}"
		gem_redirect_suffix_build=" 2>&1 | tee ${gem_filename_log_build}"
	fi

	# Execute the commands.
	if [[ ${gem_option_clean} == 1 ]]; then
		gem_CmdClean
	fi
	if [[ ${gem_option_cmake} == 1 ]]; then
		gem_CmdCMake
	fi
	if [[ ${gem_option_build} == 1 ]]; then
		gem_CmdBuild
	fi
	if [[ ${gem_option_run} == 1 ]]; then
		if [[ ${gem_host} == *"android"* ]]; then
			gem_CmdRunAndroid
		else
			gem_CmdRunLinuxAndMinGW
		fi
	fi
	if [[ ${gem_option_install} == 1 ]]; then
		gem_CmdInstall
	fi
	if [[ ${gem_option_pack} == 1 ]]; then
		gem_CmdCPack
	fi
	
	gem_time_ellapsed=$(( $(( 10#$(date +%s) )) - ${gem_time_start} ))
	printf "Execution time: $(( ${gem_time_ellapsed}/60 )) min, $(( ${gem_time_ellapsed}%60 )) sec.\n"
}
gem_Main $@

if [[ ! -z ${gem_error_msg} ]]; then
	gem_Msg "${gem_error_msg}"
fi
