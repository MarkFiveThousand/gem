#!/bin/bash

. gem_script
. gem_build

function gem_v_SetDefaults
{
	gem_build_SetDefaults;

	gem_download_src=1

	# Need gnu extensions for compile asm code.
	# Tried: c11, c90
	gem_c_standard="-std=gnu90"	# c90, c99, c11, c17, c2x, gnu90, gnu99, gnu11

#	gem_build_script="cmake"
	gem_build_script="autotools"
#	gem_build_script="meson"

	# Common Defaults
	if [[ ${gem_os} == "MINGW64"* ]]; then	# MinGW shell on Windows.
		gem_host=mingw
#		gem_host=msvc
	elif [[ ${gem_os} == "CYGWIN"* ]]; then	# MinGW shell on Windows.
		gem_host=cygwin
#		gem_host=mingw
	elif [[ ${gem_os} == "Linux"* ]]; then	# Linux shell.
		gem_host=linux
#		gem_host=mingw
#		gem_host=android_arm64_v8a
	fi

	gem_build_type=release
#	gem_build_type=debug

#-flto \
#-fPIC \

#--enable-relocatable \
#--enable-static \
#--disable-rpath \

	gem_flags_configure="${gem_flags_configure}"
	gem_flags_c="${gem_flags_c}"
	gem_flags_cpp="${gem_flags_cpp}"
	gem_flags_cxx="${gem_flags_cxx}"
	gem_flags_ld="${gem_flags_ld}"
	gem_flags_common="${gem_flags_common}"

	gem_filename_pkg=libiconv
	gem_filename_version=1.16
	gem_filename_exten=tar.gz
	gem_filename_base=${gem_filename_pkg}-${gem_filename_version}
	gem_filename_archive=${gem_filename_base}.${gem_filename_exten}
	gem_filename_url=http://ftp.gnu.org/pub/gnu/libiconv/${gem_filename_archive}
}

function gem_v_DownloadSource
{
	# Download
	if [[ ! -f ${gem_filename_archive} ]]; then
		wget -c ${gem_filename_url}
		if [[ $? != 0 ]]; then
			gem_v_Error "ERROR: gem_v_DownloadSource: wget failed to download source archive: ${gem_filename_url}"
		fi
	fi
	# Decompress
	if [[ -d ${gem_fullpath_src} ]]; then
		gem_v_Msg "MESSAGE: src directory already exists.  Archive not uncompressed."
	else
		gem_script_mkdir -p ${gem_fullpath_src}
		gem_flags_tar="<undefined>"
		if [[ ${gem_filename_exten} == *".gz"* ]]; then
			gem_flags_tar="xzf"
		elif  [[ ${gem_filename_exten} == *".xz"* ]]; then
			gem_flags_tar="xf"
		fi
		if [[ ${gem_flags_tar} == "<undefined>" ]]; then
			gem_v_Error "ERROR: gem_v_DownloadSource: Unable to decompress downloaded file with extension \"${gem_filename_exten}\"."
		fi
		tar -${gem_flags_tar} ${gem_filename_archive} -C ${gem_fullpath_src}
		if [[ $? != 0 ]]; then
			gem_v_Error "ERROR: gem_v_DownloadSource: Failed to uncompress the source archive: ${gem_filename_archive}"
		fi
		gem_script_cp -rf ${gem_fullpath_src}/${gem_filename_base}/* ${gem_fullpath_src}
		gem_script_rm -rf ${gem_fullpath_src}/${gem_filename_base}
	fi

	gem_build_DownloadSource
}

function gem_v_OnConfigure
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")

	gem_v_DebugDumpVars


#	gem_build_OnConfigure

pushd ${gem_fullpath_build}
${gem_fullpath_src}/configure --host=x86_64-pc-cygwin --prefix=/home/mhodges/gem/local_x86_64-pc-cygwin/release \
            CC=x86_64-pc-cygwin-gcc \
            CPPFLAGS="-I/usr/include -Wall" \
            LDFLAGS="-L/usr/lib"
popd
}

function gem_v_OnBuild
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")

	gem_v_DebugDumpVars
	gem_build_OnBuild
}

function gem_v_build_OnCommandLine_Build
{
	gem_build_OnCommandLine_Build

# DOESN'T WORK #1, Original.
#		gem_cmd_line_build="make -j${gem_num_jobs} \
#${gem_fullpath_autotools_makefile} \
#CFLAGS=\"${gem_flags_c}\" \
#CPPFLAGS=\"${gem_flags_cpp}\" \
#CXXFLAGS=\"${gem_flags_cxx}\" \
#LDFLAGS=\"${gem_flags_ld}\" \
#${gem_error_ignore_build_errors}"



# DOES WORK #1, Simple.
#		make

# WORKS!  It excludes LDFLAGS.
#	gem_cmd_line_build="make -j${gem_num_jobs} \
#${gem_fullpath_autotools_makefile} \
#CFLAGS=\"-std=gnu90 -march=x86-64 -msse4.2 -mpopcnt -m64 -mtune=intel -O2\" \
#CPPFLAGS=\" -march=x86-64 -msse4.2 -mpopcnt -m64 -mtune=intel -O2\" \
#CXXFLAGS=\" -march=x86-64 -msse4.2 -mpopcnt -m64 -mtune=intel -O2\" \
#${gem_error_ignore_build_errors}"

# WORKS! Try adding in the gem_flags_... variables, but still exclude LDFLAGS:
#		gem_cmd_line_build="make -j${gem_num_jobs} \
#${gem_fullpath_autotools_makefile} \
#CFLAGS=\"${gem_flags_c}\" \
#CPPFLAGS=\"${gem_flags_cpp}\" \
#CXXFLAGS=\"${gem_flags_cxx}\" \
#${gem_error_ignore_build_errors}"

# FAILS! Added LDFLAGS="".
#		gem_cmd_line_build="make -j${gem_num_jobs} \
#${gem_fullpath_autotools_makefile} \
#CFLAGS=\"${gem_flags_c}\" \
#CPPFLAGS=\"${gem_flags_cpp}\" \
#CXXFLAGS=\"${gem_flags_cxx}\" \
#LDFLAGS=\"\" \
#${gem_error_ignore_build_errors}"

# WORKS! Try only adding non-empty flags.
#		gem_cmd_line_build="make -j${gem_num_jobs} ${gem_fullpath_autotools_makefile}"
#		if [[ ${gem_flags_c}x != "x" ]]; then
#			gem_cmd_line_build="${gem_cmd_line_build} CFLAGS=\"${gem_flags_c}\" ${CFLAGS}"
#		fi
#		if [[ ${gem_flags_cpp}x != "x" ]]; then
#			gem_cmd_line_build="${gem_cmd_line_build} CPPFLAGS=\"${gem_flags_cpp}\""
#		fi
#		if [[ ${gem_flags_cxx}x != "x" ]]; then
#			gem_cmd_line_build="${gem_cmd_line_build} CXXFLAGS=\"${gem_flags_cxx}\""
#		fi
#		if [[ ${gem_flags_ld}x != "x" ]]; then
#			gem_cmd_line_build="${gem_cmd_line_build} LDFLAGS=\"${gem_flags_ld}\""
#		fi
}

function gem_v_OnInstall
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_build_OnInstall
}

function gem_v_OnUninstall
{
	# build a colon-separated list of all files installed, less the
	# gem_fullpath_install prefix.
	if [[ ${gem_os} == "MINGW64"* ]]; then	# MinGW shell on Windows.
		gem_v_Error "ERROR: Uninstall not yet implemented for Mingw."
	elif [[ ${gem_os} == "CYGWIN"* ]]; then	# Cygwin shell on Windows.
		local gem_colon_separated_list="\
bin/cygcharset-1.dll:\
bin/cygiconv-2.dll:\
bin/iconv.exe:\
include/iconv.h:\
include/libcharset.h:\
include/localcharset.h:\
lib/libcharset.a:\
lib/libcharset.dll.a:\
lib/libcharset.la:\
lib/libiconv.a:\
lib/libiconv.dll.a:\
lib/libiconv.la:\
share/doc/iconv.1.html:\
share/doc/iconv.3.html:\
share/doc/iconv_close.3.html:\
share/doc/iconv_open.3.html:\
share/doc/iconv_open_into.3.html:\
share/doc/iconvctl.3.html:\
share/man/man1/iconv.1:\
share/man/man3/iconv.3:\
share/man/man3/iconv_close.3:\
share/man/man3/iconv_open.3:\
share/man/man3/iconv_open_into.3:\
share/man/man3/iconvctl.3"
	elif [[ ${gem_os} == "Linux" ]]; then	# Linux shell.
		gem_v_Error "ERROR: Uninstall not yet implemented for Linux."
	else
		gem_v_Error "ERROR: Build platform not supported: ${gem_os}"
	fi

	local gem_ifs_saved=${IFS}
	IFS=":"
	for gem_file in ${gem_colon_separated_list}
	do
		gem_fullpath_installed_file=${gem_fullpath_install}/${gem_file}
		if [[ -f ${gem_fullpath_installed_file} ]]; then
			gem_script_rm ${gem_fullpath_installed_file}
		fi
	done
	IFS=${gem_ifs_saved}

	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/bin
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/include
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/lib
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/doc
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/man/man1
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/man/man3
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/man
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share

#	gem_build_OnUninstall
}

function gem_v_OnClean
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_build_OnClean
}

# =============================================================================
#                                       gem_Main
# =============================================================================
function gem_v_OnArg
{
	arg=$(echo ${1} | tr '[A-Z]' '[a-z]')	# Lowercase args.
	case ${arg} in
		*)	gem_build_OnArg "$@" ;	return $?
	esac
}


function gem_v_Main
{
	gem_build_Main "$@"
}

gem_v_Main $@
