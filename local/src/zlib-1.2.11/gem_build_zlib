#!/bin/bash
#  ___________                           __________
# /\   _______\                         /\   ______\
# \ \  \______/_     ___   ____ ____ ___\ \  \_____/_     ___   ___ ___  ______    ___    ___
#  \ \  \ /\__  \  /'___`\/\   V    V   \\ \_______  \  /'   `\/\  \\  \/\   __\/' ._`\ /'___`\
#   \ \  \\/__\  \/\  ___/\ \  \/\  \/\  \\/_______\  \/\  \\  \ \  \\  \ \  \ /\  \__//\  ___/
#    \ \__________\ \____\ \ \__\ \__\ \__\ /\_________\ \_____/\ \______\ \__\\ \____/\ \____\
#     \/__________/\/____/  \/__/\/__/\/__/ \/_________/\/____/  \/______/\/__/ \/___/  \/____/


. gem_script
. gem_build

function gem_v_SetDefaults
{
	gem_build_SetDefaults;

	gem_download_src=1

	# Need gnu extensions for compile asm code.
	gem_c_standard="-std=gnu11"	# c90, c99, c11, gnu90, gnu99, gnu11

	gem_build_script="cmake"
#	gem_build_script="autotools"
#	gem_build_script="meson"

	# Common Defaults
	if [[ $(uname -s) == "MINGW64"* ]]; then	# MinGW shell on Windows.
		gem_host=mingw
#		gem_host=msvc
	elif [[ $(uname -s) == "Linux"* ]]; then	# Linux shell.
		gem_host=linux
#		gem_host=mingw
#		gem_host=android_arm64_v8a
	fi

	gem_build_type=release
#	gem_build_type=debug
#	gem_build_type=relwithdebinfo

	gem_lib_type=shared
#	gem_lib_type=static

	gem_filename_pkg=zlib
	gem_filename_version=1.2.11
	gem_filename_exten=tar.gz
	gem_filename_base=${gem_filename_pkg}-${gem_filename_version}
	gem_filename_archive=${gem_filename_base}.${gem_filename_exten}
	gem_filename_url=http://www.zlib.net/${gem_filename_archive}
}

function gem_v_DownloadSource
{
	# Download
	if [[ ! -f ${gem_filename_archive} ]]; then
		wget -c ${gem_filename_url}
		if [[ $? != 0 ]]; then
			gem_v_Error "gem_v_DownloadSource: wget failed to download source archive: ${gem_filename_url}"
		fi
	fi
	# Decompress
	if [[ -d ${gem_fullpath_src} ]]; then
		gem_v_Msg "ALERT: src directory already exists.  Archive not uncompressed."
	else
		gem_script_mkdir -p ${gem_fullpath_src}
		gem_flags_tar="<undefined>"
		if [[ ${gem_filename_exten} == *".gz"* ]]; then
			gem_flags_tar="xzf"
		elif  [[ ${gem_filename_exten} == *".xz"* ]]; then
			gem_flags_tar="xf"
		fi
		if [[ ${gem_flags_tar} == "<undefined>" ]]; then
			gem_v_Error "gem_v_DownloadSource: Unable to decompress downloaded file with extension \"${gem_filename_exten}\"."
		fi
		tar -${gem_flags_tar} ${gem_filename_archive} -C ${gem_fullpath_src}
		if [[ $? != 0 ]]; then
			gem_v_Error "gem_v_DownloadSource: Failed to uncompress the source archive: ${gem_filename_archive}"
		fi

		gem_script_cp -rf ${gem_fullpath_src}/${gem_filename_base}/* ${gem_fullpath_src}
		gem_script_rm -rf ${gem_fullpath_src}/${gem_filename_base}
	fi

	gem_build_DownloadSource
}

function gem_v_OnConfigure
{	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")

#	gem_flags_configure="${gem_flags_configure}"
	gem_v_DebugDumpVars

	if [[ ${gem_host} == "cygwin" ]]; then

		# Don't define WIDECHAR for Cygwin.
		sed -i 's/defined(_WIN32) || defined(__CYGWIN__)/defined(_WIN32)/g' ${gem_fullpath_src}/gzguts.h

		# It would be preferable to tell cmake to define GCC_WINDRES for the
		# resource compiler, but I haven't had any luck at that, so we'll just
		# edit the resource file instead.
		sed -i ':a;N;$!ba;s|#ifdef GCC_WINDRES\nVS_VERSION_INFO		VERSIONINFO\n#else\nVS_VERSION_INFO		VERSIONINFO	MOVEABLE IMPURE LOADONCALL DISCARDABLE\n#endif|VS_VERSION_INFO		VERSIONINFO|g'  ${gem_fullpath_src}/win32/zlib1.rc
	fi

#-DZLIB_DLL \	# Is this depreciated?

	if [[ ${gem_lib_type} == "shared" ]]; then
		gem_cmake_params_extra=" \
-DBUILD_SHARED_LIBS=ON \
${gem_cmake_params_extra}"
	fi
	gem_build_OnConfigure
}

# *FIX: Rename the prefix for variables from another file E.g.:
# gem_fullpath_autotools_makefile to become
# gem_build_fullpath_autotools_makefile.
function gem_v_build_OnCommandLine_Build
{	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_build_OnCommandLine_Build
#	printf "\ngem_cmd_line_build=\n\n${gem_cmd_line_build}\n\n"
}

function gem_v_OnBuild
{	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_v_DebugDumpVars
	gem_build_OnBuild
}

function gem_v_OnInstall
{	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_build_OnInstall
}

function gem_v_OnUninstall
{	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")

#	gem_build_OnUninstall
	if [[ ${gem_host} == "linux" ]]; then

		gem_script_rm -f ${gem_fullpath_install}/lib/libz.a
		gem_script_rm -f ${gem_fullpath_install}/lib/libz.so
		gem_script_rm -f ${gem_fullpath_install}/lib/libz.so.1
		gem_script_rm -f ${gem_fullpath_install}/lib/libz.so.1.2.11

	elif [[ ${gem_host} == *"android"* ]]; then

		gem_script_rm -f ${gem_fullpath_install}/lib/libz.a
		gem_script_rm -f ${gem_fullpath_install}/lib/libz.so

	elif [[ ${gem_host} == "mingw" ]]; then

		gem_script_rm -f ${gem_fullpath_install}/bin/libzlib.dll
		gem_script_rm -f ${gem_fullpath_install}/bin/libzlib1.dll
		gem_script_rm -f ${gem_fullpath_install}/lib/libzlib.dll.a
		gem_script_rm -f ${gem_fullpath_install}/lib/libzlibstatic.a
	fi

	gem_script_rm -f ${gem_fullpath_install}/include/zconf.h
	gem_script_rm -f ${gem_fullpath_install}/include/zlib.h
	gem_script_rm -f ${gem_fullpath_install}/share/man/man3/zlib.3
	gem_script_rm -f ${gem_fullpath_install}/share/pkgconfig/zlib.pc
}

function gem_v_OnClean
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_v_DebugDumpVars
	gem_build_OnClean
}

# =============================================================================
#                                       gem_Main
# =============================================================================
function gem_v_OnArg
{
	arg=$(echo ${1} | tr '[A-Z]' '[a-z]')	# Lowercase args.
	case ${arg} in
		*)	gem_build_OnArg "$@" ; return $?
	esac
}

function gem_v_Main
{
	gem_build_Main "$@"
}

gem_v_Main $@
