#!/bin/bash

. gem_script
. gem_build

function gem_build_v_SetDefaults
{
	gem_build_SetDefaults;

	gem_download_src=0

	# Need gnu extensions for compile asm code.
	gem_c_standard="-std=gnu11"	# c90, c99, c11, gnu90, gnu99, gnu11

#	gem_build_script="cmake"
	gem_build_script="autotools"
#	gem_build_script="meson"

	# Common Defaults
	if [[ $(uname -s) == "MINGW64"* ]]; then	# MinGW shell on Windows.
		gem_host=mingw
#		gem_host=msvc
	elif [[ $(uname -s) == "Linux"* ]]; then	# Linux shell.
		gem_host=linux
#		gem_host=mingw
#		gem_host=android_arm64_v8a
	fi

	gem_build_type=release
#	gem_build_type=debug
}

function gem_build_v_SetFlags
{
	gem_build_SetFlags

	gem_flags_configure="${gem_flags_configure}"
	gem_flags_c="${gem_flags_c} $(pkg-config --cflags-only-I sdl2)"
	gem_flags_cpp="${gem_flags_cpp}"
	gem_flags_cxx="${gem_flags_cxx}"
	gem_flags_ld="${gem_flags_ld}"
}

function gem_build_v_BuildFilePath_Src
{
	echo "$(pwd)/src/test"
}

function gem_build_v_BuildFilePath_Build
{
	echo "$(pwd)/build_tests/${gem_path_suffix}"
}

function gem_build_v_OnCommandLine_Configure_CMake
{
	gem_build_OnCommandLine_Configure_CMake
}

function gem_build_v_OnConfigure
{
	gem_build_v_DebugDumpVars
	gem_build_OnConfigure
}

function gem_build_v_OnCommandLine_Build
{
	gem_build_OnCommandLine_Build
}

function gem_build_v_OnBuild
{
	gem_build_v_DebugDumpVars
	gem_build_OnBuild
}

function gem_build_v_OnInstall
{
	gem_build_OnInstall
}

function gem_build_v_OnUninstall
{
	gem_build_OnUninstall
}

function gem_build_v_OnClean
{
	gem_build_OnClean
}

# =============================================================================
#                                       gem_Main
# =============================================================================
function gem_script_v_OnArg
{
	arg=$(echo ${1} | tr '[A-Z]' '[a-z]')	# Lowercase args.
	case ${arg} in
		*)	gem_build_OnArg "$@" ;	return $?
	esac
}


function gem_script_v_Main
{
	gem_build_Main "$@"
}
gem_script_v_Main $@
