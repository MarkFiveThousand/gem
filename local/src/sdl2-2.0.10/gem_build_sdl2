#!/bin/bash

. gem_script
. gem_build

function gem_v_SetDefaults
{
	gem_build_SetDefaults;

	gem_download_src=1

	# Need gnu extensions for compile asm code.
	gem_c_standard="-std=gnu11"	# c90, c99, c11, gnu90, gnu99, gnu11

	gem_build_script="cmake"
#	gem_build_script="autotools"
#	gem_build_script="meson"

	# Common Defaults
	if [[ $(uname -s) == "MINGW64"* ]]; then	# MinGW shell on Windows.
		gem_host=mingw
#		gem_host=msvc
	elif [[ $(uname -s) == "Linux"* ]]; then	# Linux shell.
		gem_host=linux
#		gem_host=mingw
#		gem_host=android_arm64_v8a
	fi

	gem_build_type=release
#	gem_build_type=debug

	gem_flags_configure=
	gem_flags_c=
	gem_flags_cpp=
	gem_flags_cxx=
	gem_flags_ld=
}

function gem_v_DownloadSource
{
	if [[ -d ./SDL || -d ./src ]]; then
		gem_v_Error "The source tree already exists.  Refusing to download."
	fi
	gem_v_Msg "Sometimes the server runs slow.  This may take up to a minute to begin.  Please be patient..."
	hg clone https://hg.libsdl.org/SDL SDL

	if [[ -d ./SDL && ! -d ./src ]]; then
		mv ./SDL ./src
	fi
}

function gem_v_OnConfigure
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")

	gem_flags_configure="${gem_flags_configure}"

	gem_v_DebugDumpVars
	gem_build_OnConfigure
}

function gem_v_build_CommandLine_Build
{
	gem_build_CommandLine_Build
#	printf "\ngem_cmd_line_build=\n\n${gem_cmd_line_build}\n\n"
}

function gem_v_OnBuild
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_v_DebugDumpVars
	gem_build_OnBuild
}

function gem_v_OnInstall
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_build_OnInstall


}

function gem_v_OnUninstall
{
	gem_build_OnUninstall
}

function gem_v_OnClean
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_build_Cmd_OnClean
}

# =============================================================================
#                                       gem_Main
# =============================================================================
function gem_v_OnArg
{
	arg=$(echo ${1} | tr '[A-Z]' '[a-z]')	# Lowercase args.
	case ${arg} in
		*)	gem_build_OnArg "$@" ;	return $?
	esac
}


function gem_v_Main
{
	gem_build_Main "$@"
}

gem_v_Main $@
