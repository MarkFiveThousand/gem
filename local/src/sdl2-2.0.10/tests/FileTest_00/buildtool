#!/bin/bash

# USAGE:
# 
# This script *must* be run in the parent of the src/ folder.
#
# Uncomment PROJ_LIB_DIR if your are building a library.

THISSCRIPT_NUM_ARGS=$#
THISSCRIPT_ARGS=$@


function initialize()
{
	PROJ_NAME=FileTest_00


	# Set the target plaform.  For now, we assume target is the same as the host.
	# This will have to change for android development, which involves cross-compiling.
	# Note: PROJ_TARGET_PLATFORM is the OS we are building for.  GEM_OS_HOST_BUILD is the OS
	# we are building on.
	PROJ_TARGET_PLATFORM=${GEM_OS_HOST_BUILD}

	PROJ_DIR=$(pwd)			# Current folder; parent of source tree.

	CMAKE_C_FLAGS="${CMAKE_C_FLAGS} "
	CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} "
	CMAKE_CPP_FLAGS="${DCMAKE_CPP_FLAGS} "
	CMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS} "
	CMAKE_INSTALL_PREFIX=""

	PROJ_BIN_DIR=$PROJ_DIR/bin
	PROJ_BIN_FULLPATH=""
	PROJ_BUILD_CONFIG=""
	PROJ_BUILD_DIR=$PROJ_DIR/build
	PROJ_BUILD_FULLPATH=""
	GEM_BUILD_LEVEL=""
	PROJ_INSTALL_DIR=$PROJ_DIR/install
	PROJ_INSTALL_FULLPATH=""
	PROJ_LIB_DIR=$PROJ_DIR/lib
	PROJ_EXE_NAME=$PROJ_NAME
	PROJ_SRC_DIR=$PROJ_DIR/src
}

function echoVars()
{
	# Note: PROJ_TARGET_PLATFORM is the OS we are building for.  GEM_OS_HOST_BUILD is the OS
	# we are building on.

	echo "CMAKE_MAKE_PROGRAM = $CMAKE_MAKE_PROGRAM"
	echo "PROJ_TARGET_PLATFORM = $PROJ_TARGET_PLATFORM"
	echo "PROJ_NAME = $PROJ_NAME"
	echo "PROJ_DIR = $PROJ_DIR"
	echo "- - - - - - - - - - - - - - - - - - - - - - - -"
	echo "CMAKE_C_FLAGS = $CMAKE_C_FLAGS"
	echo "CMAKE_CXX_FLAGS = $CMAKE_CXX_FLAGS"
	echo "CMAKE_CPP_FLAGS = $CMAKE_CPP_FLAGS"
	echo "CMAKE_EXE_LINKER_FLAGS = $CMAKE_EXE_LINKER_FLAGS"
	echo "CMAKE_INSTALL_PREFIX = $CMAKE_INSTALL_PREFIX"

	echo "GEM_BUILD_LEVEL = $GEM_BUILD_LEVEL"
	echo "GEM_OS_HOST_BUILD = $GEM_OS_HOST_BUILD"

	# xxx_DIR provides the directory above the platform-specific folders.
	# xxx_FULLPATH includes the platform-specific folders.
	echo "PROJ_BIN_DIR = $PROJ_BIN_DIR"
	echo "PROJ_BIN_FULLPATH = $PROJ_BIN_FULLPATH"
	echo "PROJ_BUILD_CONFIG = $PROJ_BUILD_CONFIG"
	echo "PROJ_BUILD_DIR = $PROJ_BUILD_DIR"
	echo "PROJ_BUILD_FULLPATH = $PROJ_BUILD_FULLPATH"
	echo "PROJ_EXE_NAME = $PROJ_EXE_NAME"
	echo "PROJ_INSTALL_DIR = $PROJ_INSTALL_DIR"
	echo "PROJ_INSTALL_FULLPATH = $PROJ_INSTALL_FULLPATH"
	echo "PROJ_LIB_DIR = $PROJ_LIB_DIR"
	echo "PROJ_LIB_FULLPATH = $FULLPATH"
	echo "PROJ_SRC_DIR = $PROJ_SRC_DIR"
}

function echoHelp()
{
	echo "============================================================================="
	echo "IMPORTANT: This script must be located in the parent of the source tree."
	echo
	echo "FILE STRUCTURE:"
	echo ""
	echo "    EXAMPLE:"
	echo "        my_project/       Parent of source tree.  buildtool script here."
	echo "            bin/          Install location"
	echo "            build/        Object & cmake files"
	echo "            src/          Source tree"
	echo
	echo "USAGE:"
	echo "    Arguments:"
	echo "        build   (must be preceded by \"debug\" or \"release\")"
	echo "        clean   (must be preceded by \"debug\" or \"release\")"
	echo "        install (must be preceded by \"debug\" or \"release\")"
	echo "        cmake   (must be preceded by \"debug\" or \"release\")"
	echo
	echo "EXAMPLE USAGE:"
	echo ""
	echo "    buildtool cmake"
	echo "    buildtool debug build"
	echo "    buildtool release clean"
	echo ""
	echo "============================================================================="
}



# =============================================================================
#                                      build
# =============================================================================
SourceFileList=""
function EnumSourceFiles
{
	# Strip trailing /
	srcDir=${1%/}

	if [ ! -d "$srcDir" ]; then
		echo "ERROR: CopyDirs() source directory does not exist:"
		echo $srcDir
		return
	fi

	# Process files in $srcDir
	srcFileList=$(find $srcDir -mindepth 1 -maxdepth 1 -type f)
	for srcFileName in $srcFileList
	do
		fileName=${srcFileName##*/}
		srcFile=${srcDir}/$fileName
		SourceFileList=${SourceFileList}'\t'${srcFile}' \\\n'
	done

	# Iterate over the sub directories in $srcDir.
	srcDirList=$(find $srcDir -mindepth 1 -maxdepth 1 -type d)
	for srcDir in $srcDirList
	do
		# Enter a sub directory.
		pushd $srcDir > /dev/null
		EnumSourceFiles $srcDir
		popd > /dev/null
	done
}

# CopyDirs() copies all the files in $SRC_DIR and its subtrees to $DST_DIR.
# We must iterate over the individual files and sub directories manually so
# that we can process each file.  For source files we must add each one to
# Android.mk to get built.  Also, we want to selectively omit files for non-
# android platforms.  Directories to be omitted can be identified by their
# paths containing "linux" or "mingw".  We also need to process assets in the
# same way.
function CopyDirs()
{
	# Strip trailing /
	srcDir=${1%/}
	dstDir=${2%/}
	dstDirRoot=$dstDir

	if [ ! -d "$srcDir" ]; then
		echo "ERROR: CopyDirs() source directory does not exist:"
		echo $srcDir
		return
	fi
	if [ ! -d "$dstDir" ]; then
		mkdir -p $dstDir
		echo "Creating: $dstDir"
	fi

	# Process files in $srcDir
	srcFileList=$(find $srcDir -mindepth 1 -maxdepth 1 -type f)
	for srcFileName in $srcFileList
	do
		fileName=${srcFileName##*/}
		srcFile=${srcDir}/$fileName
		dstFile=${dstDir}/$fileName
		cp $srcFile $dstFile
		SRC_LIST=${SRC_LIST}$'\t'${srcFile}$' \\\n'
	done

	# Iterate over the sub directories in $srcDir.
	srcDirList=$(find $srcDir -mindepth 1 -maxdepth 1 -type d)
	for srcDir in $srcDirList
	do
		# Enter a sub directory.
		pushd $srcDir > /dev/null
		leafDir=${srcDir##*/}
		dstDir=${dstDir}/$leafDir

		CopyDirs $srcDir $dstDir	# Recurse into and process the sub directory.

		# Pop the sub directory
		dstDir=${dstDir%${dstDir##*/}}
		dstDir=${dstDir%/}
		popd > /dev/null
	done
}

function func_build()
{
    ValidateBuildConfig

	if [ $PROJ_TARGET_PLATFORM == "Android" ]; then

		if [ ! -d ${PROJ_BUILD_FULLPATH} ]; then
			mkdir -p ${PROJ_BUILD_FULLPATH}
		else
			rm -fr ${PROJ_BUILD_FULLPATH}/*
		fi

		cp -r $SDL_DIR/android-project/* ${PROJ_BUILD_FULLPATH}

		# $MY_PROJ_DIR/android-project/jni/src/Android.mk contains the
		# following reference:
		#
		# SDL_PATH := ../SDL
		#
		# We will fix this by creating a link:

		cd ${PROJ_BUILD_FULLPATH}/jni
		ln -s $SDL_DIR ./SDL
		cd src

		# npp $MY_PROJ_DIR/android-project/jni/src/Android.mk
		# Change YourSourceHere.c with main.cpp.

		cp $SDL_DIR/test/testgles2.c ${PROJ_BUILD_FULLPATH}/jni/src

		# Add our source files to ${PROJ_BUILD_FULLPATH}/jni/src/Android.mk
		EnumSourceFiles /home/mhodges/projects/sdl2_apps/FileTest_00/src
#		echo "$SourceFileList"
		sed -i 's|YourSourceHere.c|'"$SourceFileList"'|g' ${PROJ_BUILD_FULLPATH}/jni/src/Android.mk > ${PROJ_BUILD_FULLPATH}/jni/src/Android_new.mk
# NO LONGER NECESSARY DUE TO -i, edit the files "in place".
#		rm ${PROJ_BUILD_FULLPATH}/jni/src/Android.mk
#		mv ${PROJ_BUILD_FULLPATH}/jni/src/Android_new.mk ${PROJ_BUILD_FULLPATH}/jni/src/Android.mk

		sed 's|APP_ABI := armeabi armeabi-v7a x86|APP_ABI := armeabi-v7a|g' ${PROJ_BUILD_FULLPATH}/jni/Application.mk > ${PROJ_BUILD_FULLPATH}/jni/Application.mk_new
		mv ${PROJ_BUILD_FULLPATH}/jni/Application.mk_new ${PROJ_BUILD_FULLPATH}/jni/Application.mk

		# Copy our assets into the android project.
		CopyDirs ${PROJ_DIR}/assets ${PROJ_BUILD_FULLPATH}/assets

		# Pass NDK_DEBUG=1 to ndk-build for a debug build.
		ndk-build NDK_DEBUG=1 -j8


	else
		cd ${PROJ_BUILD_FULLPATH}

	#   make -j9 # VERBOSE=1

		if [ 1 -eq 2 ]; then

			make > $PROJ_DIR/build_output.txt 2>&1
			echo "Output sent to build_output.txt"
		else

			make
		fi
	fi
}


# =============================================================================
#                                      install
# =============================================================================
function func_install()
{
    ValidateBuildConfig

	if [ $PROJ_TARGET_PLATFORM == "Android" ]; then
		cd ${PROJ_BUILD_FULLPATH}
		android update project --target "android-23" --path ./
		ant debug install
	else
		cd ${PROJ_BUILD_FULLPATH}

		make install
	fi
}


# =============================================================================
#                                      clean
# =============================================================================
function func_clean()
{
    ValidateBuildConfig

	if [ $PROJ_TARGET_PLATFORM == "Android" ]; then
		echo "The clean command is not implemented for android builds."
	else
		cd ${PROJ_BUILD_FULLPATH}

		make clean

		# FIX: What else to clean up here?
		# rm -rf ${PROJ_INSTALL_FULLPATH}/*
	fi
}


# =============================================================================
#                                      cmake
# =============================================================================
function func_cmake()
{
    ValidateBuildConfig
	
	if [ $PROJ_TARGET_PLATFORM == "Android" ]; then
		echo "The cmake command is not necessary for android builds."
	else
		if [ ! -d ${PROJ_BUILD_FULLPATH} ]; then
			mkdir -p ${PROJ_BUILD_FULLPATH}
		else
			rm -fr ${PROJ_BUILD_FULLPATH}/*
		fi

		cd ${PROJ_BUILD_FULLPATH}

		# =========================================================================
		# Target-specific Settings
		# =========================================================================
		if [ $PROJ_TARGET_PLATFORM == "GEM_OS_HOST_BUILD_MINGW" ]; then

			CMAKE_MAKE_PROGRAM="/c/msys64/mingw64/bin/mingw32-make.exe"

		elif [ $PROJ_TARGET_PLATFORM == "GEM_OS_HOST_BUILD_LINUX" ]; then

			CMAKE_MAKE_PROGRAM="/bin/make"
		fi

	cmake $PROJ_SRC_DIR -G"Unix Makefiles" \
			-DCMAKE_C_FLAGS="${CMAKE_C_FLAGS}" \
			-DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS}" \
			-DCMAKE_CPP_FLAGS="${CMAKE_CPP_FLAGS}" \
			-DCMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS}" \
			-DCMAKE_INSTALL_PREFIX="${DIR_BIN_FULLPATH}" \
			-DCMAKE_MAKE_PROGRAM="${CMAKE_MAKE_PROGRAM}" \
\
			-DGEM_BUILD_LEVEL=${GEM_BUILD_LEVEL} \
			-DGEM_OS_HOST_BUILD="${GEM_OS_HOST_BUILD}" \
\
			-DPROJ_BIN_DIR=${PROJ_BIN_DIR} \
			-DPROJ_BIN_FULLPATH=${PROJ_BIN_FULLPATH} \
			-DPROJ_BUILD_CONFIG=${PROJ_BUILD_CONFIG} \
			-DPROJ_BUILD_DIR=${PROJ_BUILD_DIR} \
			-DPROJ_BUILD_FULLPATH=${PROJ_BUILD_FULLPATH} \
			-DPROJ_DIR=${PROJ_DIR} \
			-DPROJ_EXE_NAME=${PROJ_EXE_NAME} \
			-DPROJ_INSTALL_DIR=${PROJ_INSTALL_DIR} \
			-DPROJ_INSTALL_FULLPATH=${PROJ_INSTALL_FULLPATH} \
			-DPROJ_LIB_DIR=${PROJ_LIB_DIR} \
			-DPROJ_LIB_FULLPATH=${PROJ_LIB_FULLPATH} \
			-DPROJ_NAME=${PROJ_NAME} \
			-DPROJ_SRC_DIR=${PROJ_SRC_DIR} \
			-DPROJ_TARGET_PLATFORM=${PROJ_TARGET_PLATFORM}
	fi
}


# =============================================================================
#                           Helper Functions
# =============================================================================
function ValidateBuildConfig()
{
    if [ -z $PROJ_BUILD_CONFIG ]    # If string empty...
    then
        echo "ERROR: You must include a PROJ_BUILD_CONFIG before a command.  Valid PROJ_BUILD_CONFIGs are Debug and Release."
        exit;
    fi
    if [ $PROJ_BUILD_CONFIG != "Debug" ] && [ $PROJ_BUILD_CONFIG != "Release" ]
    then
        echo "ERROR: You must include a PROJ_BUILD_CONFIG before a command.  Valid PROJ_BUILD_CONFIGs are Debug and Release."
        exit;
    fi
}

function BuildFullPaths()
{
	PROJ_BUILD_FULLPATH=$PROJ_BUILD_DIR/$PROJ_TARGET_PLATFORM/$PROJ_BUILD_CONFIG
	PROJ_BIN_FULLPATH=$PROJ_BIN_DIR/$PROJ_TARGET_PLATFORM/$PROJ_BUILD_CONFIG
	PROJ_INSTALL_FULLPATH=$PROJ_INSTALL_DIR/$PROJ_TARGET_PLATFORM/$PROJ_BUILD_CONFIG
	PROJ_LIB_FULLPATH=$PROJ_LIB_DIR/$PROJ_TARGET_PLATFORM/$PROJ_BUILD_CONFIG
}


# =============================================================================
#                                       Main
# =============================================================================

function main()
{
	# If no params, display help.
	if [ $THISSCRIPT_NUM_ARGS -eq 0 ]
	then
		echoHelp;
		return
	fi

	if [ ! -d $(pwd)/src ]; then
		echo "ERROR: This script must be run in the parent of the source folder src/."
		return
	fi

	initialize
	
	# Iterate over all the arguments.
	for arg in $THISSCRIPT_ARGS
	do
		case "$arg" in
		android|ANDROID|Android)
			PROJ_TARGET_PLATFORM=Android
			;;
		build)
			FUNC=func_build
			;;
		install)
			FUNC=func_install
			;;
		clean)
			FUNC=func_clean
			;;
		cmake)
			FUNC=func_cmake
			;;
		debug|DEBUG|Debug)
			PROJ_BUILD_CONFIG=Debug
			GEM_BUILD_LEVEL=GEM_BUILD_LEVEL_DEBUG
			;;
		release|RELEASE|Release)
			PROJ_BUILD_CONFIG=Release
			GEM_BUILD_LEVEL=GEM_BUILD_LEVEL_RELEASE
			;;
		master|MASTER|Master)
			PROJ_BUILD_CONFIG=Master
			GEM_BUILD_LEVEL=GEM_BUILD_LEVEL_MASTER
			;;
		goldmaster|GOLDMASTER|GoldMaster)
			PROJ_BUILD_CONFIG=Release
			GEM_BUILD_LEVEL=GEM_BUILD_LEVEL_GOLDMASTER
			;;
		*)
			# Unrecognised parameter
			echo "ERROR: Incorrect Usage."
			echo ""
			echoHelp
			return
			;;
		esac
	done

	BuildFullPaths

	$FUNC	# Invoke the function.
}
main

