#!/bin/bash
#  ___________                           __________
# /\   _______\                         /\   ______\
# \ \  \______/_     ___   ____ ____ ___\ \  \_____/_     ___   ___ ___  ______    ___    ___
#  \ \  \ /\__  \  /'___`\/\   V    V   \\ \_______  \  /'   `\/\  \\  \/\   __\/' ._`\ /'___`\
#   \ \  \\/__\  \/\  ___/\ \  \/\  \/\  \\/_______\  \/\  \\  \ \  \\  \ \  \ /\  \__//\  ___/
#    \ \__________\ \____\ \ \__\ \__\ \__\ /\_________\ \_____/\ \______\ \__\\ \____/\ \____\
#     \/__________/\/____/  \/__/\/__/\/__/ \/_________/\/____/  \/______/\/__/ \/___/  \/____/


. gem_script
. gem_build

function gem_v_SetDefaults
{
	gem_build_SetDefaults;

	gem_c_standard="-std=gnu90"	# c90, c99, c11, gnu90, gnu99, gnu11

#	gem_build_script="cmake"
	gem_build_script="autotools"
#	gem_build_script="meson"

	# Common Defaults
	if [[ ${gem_os} == "MINGW64"* ]]; then	# MinGW shell on Windows.
		gem_host=mingw
#		gem_host=msvc
	elif [[ ${gem_os} == "CYGWIN"* ]]; then		# Cygwin shell on Windows.
		gem_host=cygwin
#		gem_host=mingw
	elif [[ ${gem_os} == "Linux"* ]]; then	# Linux shell.
		gem_host=linux
#		gem_host=mingw
#		gem_host=android_arm64_v8a
	fi

	gem_build_type=release
#	gem_build_type=debug

	# The package url must be in the following format:
	# <url parent>/<package name>-<version>.tar.<extension>
	gem_filename_url=https://mirrors.kernel.org/gnu/texinfo/texinfo-6.7.tar.xz

	# Set build flags.
	gem_flags_configure="${gem_flags_configure}"
	gem_flags_c="${gem_flags_c}"
	gem_flags_cpp="${gem_flags_cpp}"
	gem_flags_cxx="${gem_flags_cxx}"
	gem_flags_ld="${gem_flags_ld}"
	gem_flags_common="${gem_flags_common}"
}

function gem_v_DownloadSource
{
	gem_build_DownloadSource
}

function gem_v_OnConfigure
{
	# We have difficulties building without GNU Help2Man.  This somehow makes
	# it work.
	# *FIX: Remove this when we get help2man building properly.
	find ${gem_fullpath_src} -name \*.1 | xargs touch

	gem_v_DebugDumpVars
	gem_build_OnConfigure
}

function gem_v_build_CommandLine_Build
{
	gem_build_CommandLine_Build
}

function gem_v_OnBuild
{
	gem_v_DebugDumpVars
	gem_build_OnBuild
}

function gem_v_OnInstall
{
	gem_build_OnInstall
}

function gem_v_OnUninstall
{
	gem_build_OnUninstall

	# build a colon-separated list of all files installed, less the
	# gem_fullpath_install prefix.
	if [[ ${gem_os} == "Linux" || ${gem_os} == "MINGW64"* ]]; then	# Linux shell.
		local gem_colon_separated_list="\
bin/makeinfo:\
share/info/dir:"
	elif [[ ${gem_os} == "CYGWIN"* ]]; then	# Cygwin shell on Windows.
		gem_v_Error "gem_build_texinfo: gem_v_OnUninstall() not yet implemented for mingw and cygwin."
	else
		gem_v_Error "Build platform not supported: ${gem_os}"
	fi


	local gem_ifs_saved=${IFS}
	IFS=":"
	for gem_file in ${gem_colon_separated_list}
	do
		gem_fullpath_installed_file=${gem_fullpath_install}/${gem_file}
		gem_script_rm ${gem_fullpath_installed_file}
	done
	IFS=${gem_ifs_saved}

	local gem_space_separated_list="ca ca.us-ascii cs da de de.us-ascii el eo es fi fr he hr hu id it ja nb nl no.us-ascii pl pt pt_BR pt_BR.us-ascii pt.us-ascii ro ru rw sl sv tr uk vi zh_CN zh_TW"
	local gem_ifs_saved=${IFS}
	IFS=" "
	for gem_lang in ${gem_space_separated_list}
	do
		gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/locale/${gem_lang}/LC_MESSAGES
		gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/locale/${gem_lang}
	done
	IFS=${gem_ifs_saved}

	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/bin
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/lib/texinfo
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/lib
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/man/man1
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/man/man5
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/man
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/texinfo/DebugTexinfo
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/texinfo/init
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/texinfo/Pod-Simple-Texinfo/Pod/Simple
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/texinfo/Pod-Simple-Texinfo/Pod
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/texinfo/Pod-Simple-Texinfo
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/texinfo/Texinfo/Convert
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/texinfo/Texinfo/XS/parsetexi
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/texinfo/Texinfo/XS
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/texinfo/Texinfo
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/texinfo
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/info
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share/locale
	gem_script_rmdir_IfEmpty ${gem_fullpath_install}/share
}

function gem_v_Cmd_Clean
{
	# gem_flags_configure, gem_flags_c, gem_flags_cpp, gem_flags_cxx,
	# gem_flags_ld. To remove a flag:
	# flags=$(printf '%s\n' "${flags//-byebye/}")
	gem_build_Cmd_Clean
}

# =============================================================================
#                                       gem_Main
# =============================================================================
function gem_v_OnArg { gem_build_texinfo_OnArg "$@";}
function gem_build_texinfo_OnArg
{
	local arg=${1}
	case ${arg} in
		*)	gem_build_OnArg "$@" ;	return $?
	esac
}

function gem_v_Main
{
	gem_build_Main "$@"
}
gem_v_Main $@
