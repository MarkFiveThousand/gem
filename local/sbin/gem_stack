#!/bin/bash
#  ___________                           __________
# /\   _______\                         /\   ______\
# \ \  \______/_     ___   ____ ____ ___\ \  \_____/_     ___   ___ ___  ______   ____    ___
#  \ \  \ /\__  \  /'___`\/\   V    V   \\ \_______  \  /'   `\/\  \\  \/\   __\/' ._`\ /'___`\
#   \ \  \\/__\  \/\  ___/\ \  \/\  \/\  \\/_______\  \/\  \\  \ \  \\  \ \  \ /\  \__//\  ___/
#    \ \__________\ \____\ \ \__\ \__\ \__\ /\_________\ \_____/\ \______\ \__\\ \____/\ \____\
#     \/__________/\/____/  \/__/\/__/\/__/ \/_________/\/____/  \/______/\/__/ \/___/  \/____/


class Stack
	func Stack
	func Push
	func Pop
	func Peek
	func Size
	func Print

	var mSize
	var mTos
	var mStack

Stack::Stack()
{
	mSize=0
	mTos=
	declare -a INSTANCE_$THIS_mStack
}



#declare -a gem_script_validate_response_stack

function Stack::Push()
{
    if [ -z "$1" ]; then    # Nothing to push?
        gem_script_v_Error "gem_script_validate_response_Push() called with no value."
    fi

    mStack[${mSize}]=$1
    let "mSize += 1"     # Bump stack pointer.
    return
}

function Stack::Pop()
{
    if [[ "${mSize}" -eq 0 ]]; then  # Stack empty?
        gem_script_v_Error "Tried to pop() from empty stack."
    fi

    let "mSize -= 1"
    mTos=${mStack[${mSize}]}
}

function Stack::Peek()
{
	if [[ ${mSize} == 0 ]]; then
		gem_script_v_Msg "Stack::Peek(): Stack is empty."
	else
    	echo ${mStack[$((${mSize}-1))]}
	fi
}

function Stack::Size()
{
	return ${mSize}
}

function Stack::Print()
{
	echo "Stack::Print():"

	if [[ ${mSize} == 0 ]]; then
		echo "    empty"
	else
#		for i in $(seq 0 ${mSize}); do
#			echo "    [$i] = ${mStack[${i}]}"
#		done
		local i=0
		while [[ $i -lt ${mSize} ]]; do
			echo "    [$i] = ${mStack[${i}]}"
			let i=i+1
		done
	fi
}



