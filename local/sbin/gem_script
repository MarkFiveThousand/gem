#!/bin/bash
#  ___________                           __________
# /\   _______\                         /\   ______\
# \ \  \______/_     ___   ____ ____ ___\ \  \_____/_     ___   ___ ___  ______    ___    ___
#  \ \  \ /\__  \  /'___`\/\   V    V   \\ \_______  \  /'   `\/\  \\  \/\   __\/' ._`\ /'___`\
#   \ \  \\/__\  \/\  ___/\ \  \/\  \/\  \\/_______\  \/\  \\  \ \  \\  \ \  \ /\  \__//\  ___/
#    \ \__________\ \____\ \ \__\ \__\ \__\ /\_________\ \_____/\ \______\ \__\\ \____/\ \____\
#     \/__________/\/____/  \/__/\/__/\/__/ \/_________/\/____/  \/______/\/__/ \/___/  \/____/

# ==============================================================================
# gem_script_PythonModule()- Calls a Python function.  Parameter 1 is the module
# containing the function to be called.  Parameter 2 must be the name of the
# python function.  Parameter 3 must be a single string containing all the
# arguments separated by commas.  This string will serve as the parameter list
# for the Python call, and as such should be formatted the way parameters are
# specified in Python.
#
# Example usage:
#
#    gem_script_PythonModule MyModule MyFunction "\"Hello\", 1024"
#
# ==============================================================================
function gem_script_PythonModule
{
	local module=${1};
	local func=${2};
	local params=${3};

	local cmd="python -c \"import sys;sys.path.insert(0,\\\"${gem_fullpath_gem}/local/sbin\\\");from ${module} import ${func}; gem_result=${func}(${params}); sys.exit(gem_result);\""
	echo ${cmd}
	eval ${cmd}; gem_result=$?
	if [[ ${gem_result} -ne 0 ]] ; then
		gem_script_Debug "The Python intrepreter failed to call the requested python function."
		return 1
	fi
	return ${gem_result}
}

# ==============================================================================
# gem_script_Python()- Calls a Python function.  Parameter 1 must be the name of
# the python function.  Parameter 2 must be a single string containing all the
# arguments separated by commas.  This string will serve as the parameter list
# for the Python call, and as such should be formatted the way parameters are
# specified in Python.
#
# Example usage:
#
#    gem_script_Python MyFunction "\"Hello\", 1024"
#
# ==============================================================================
function gem_script_Python
{
	local func=${1};
	local params=${2};
	local params_escaped=${params//\"/\\\"}

	gem_script_PythonModule gem_script "${func}" "${params_escaped}"
	return $?
}

gem_script_Python Foo "\"Hello there!\""




[[ -n ${gem_script_included} ]] && exit
export gem_script_included=1

. gem_log

export gem_script_globals_delimiter="<GEM>"
export gem_script_globals_var_list
export gem_script_OnArg_num_handled_there

# ==============================================================================
# gem_script_String_IsWholeNumber()- Echos true if $1 is a whole number.
# ==============================================================================
function gem_script_String_IsWholeNumber
{
	if [[ ${1} =~ ^[0-9]+$ ]] ; then
		echo "true"
	else
		echo "false"
	fi
	return 1
}

# ==============================================================================
# gem_script_String_IsIdentifier()- Echos true if $1 is a C-style identifier
# containing underscore, numerical digits, and both case letters, otherwise
# false.
# ==============================================================================
function gem_script_String_IsIdentifier
{
	if [[ ${1} =~ ^[_a-zA-Z]+[_a-zA-Z0-9]*$ ]] ; then
		echo "true"
	else
		echo "false"
	fi
	return 1
}

# ==============================================================================
# gem_script_String_Trim()- Trims the whitespace from the head and tail of a
# string.
#
# Source:
# https://unix.stackexchange.com/questions/476455/how-to-remove-leading-and-trailing-spaces-from-a-shell-variable
# ==============================================================================
function gem_script_String_Trim
{
	local var=$1
    # Determine if 'extglob' is currently on.
    local extglobWasOff=1
    shopt extglob >/dev/null && extglobWasOff=0 
    (( extglobWasOff )) && shopt -s extglob # Turn 'extglob' on, if currently turned off.

	trim=${var%%*([[:space:]])}
	trim=${trim##*([[:space:]])}
	printf '%s\n' "$trim"

    (( extglobWasOff )) && shopt -u extglob # If 'extglob' was off before, turn it back off.
	return 0
}

# ==============================================================================
# gem_script_String_StripComments()- Removes any characters following, and
# including, #.
# ==============================================================================
function gem_script_String_StripComments
{
	local str=${1}
	printf "%s" "${str%%#*}"
	return $?
}

# ==============================================================================
# Returns 1 if a space-separated list, $1, contains the indicated string $2.
#
# *TODO: Correct the logic to work like typical return values.  I.e. 0 means
# success, and 1 non-zero means failure.
# ==============================================================================
function gem_script_ListContains
{
	haystack=${1}
	needle=${2}

	local gem_ifs_saved=${IFS}
	local gem_found="false"
	IFS=" "
	for item in ${haystack}; do

		if [[ ${item} == "${needle}" ]]; then
			gem_found="true"
			break
		fi
	done
	IFS=${gem_ifs_saved}
	echo ${gem_found}
	return 0
}

# ==============================================================================
# gem_script_ValidatePaths()- Receives as parameters a copy of the
# parameters that were passed to our file system wrappers gem_script_cd and
# related family of functions, ... etc.  We would like to restrict these
# functions from working outside the gem file heirarchy for safety purposes.
#
# Every argument that realpath successfully converts is expected to be a file
# path and, therefore, must contain "/gem/".
# ==============================================================================
function gem_script_ValidatePaths
{
	if [[ $# -lt 1 ]]; then
		gem_result="false"
	else
		gem_result="true"
		for arg in "$@"
		{
			local gem_absolute_path
			# Expand relative paths.
			if ! gem_absolute_path=$(realpath "${arg}" 2>/dev/null); then gem_log_v_Debug "gem_script_ValidatePaths(): realpath failed."; gem_result="false"; break
			# Must be under gem file tree, for safety.
			elif [[ ${gem_absolute_path} != *"/gem/"* && ${arg} != *"/gem/"* ]]; then gem_log_v_Debug "gem_script_ValidatePaths(): Refusing to perform file operations outside of gem file tree: Attempted to access file: ${arg}"; gem_result="false"; break
			fi
		}
	fi
	echo ${gem_result}
	return 0
}

# Given a list of arguments (intended to be passed to a file-related call), it
# sets gem_patharg1 and possibly gem_patharg2 to the arguments that are file
# paths.  Returns the number of file paths set.

#function gem_script_PathArg
# {
#	local gem_counter=0
#	for arg in "$@"
#	{
#		local gem_absolute_path
#		gem_absolute_path=$(realpath "${arg}" 2>/dev/null)	# Expand relative paths.
#		local gem_result=$?
#		if [[ ${gem_result} -eq 0  ]]; then
#			if [[ -z ${gem_patharg1} ]]; then
#				gem_patharg1=${arg}
#			else
#				gem_patharg2=${arg}
#			fi
#			((gem_counter++))
#		fi
#	}
#	return ${gem_counter}
#}






# ==============================================================================
#
# Safe Shell commands
#
# The following functions are safe alternatives to common bash shell commands.
# The file domain is limited to the gem/ file tree.
#
# *TODO: Manage the return values of all these.
# ==============================================================================
function gem_script_cd
{
	local gem_result
	if ! gem_result=$(gem_script_ValidatePaths "${@}"); then gem_log_v_Debug "gem_script_cd(): gem_script_ValidatePaths() failed."; return 1; fi
	if [[ ${gem_result} == "false" ]]; then gem_log_v_Debug "gem_script_cd(): Invalid arguments provided."; return 1; fi

	local gem_cmd_line="cd ${*}"

	local gem_cmd_output
	gem_cmd_output=$(${gem_cmd_line} 2>&1); gem_cmd_result=$? 
	if [[ ${gem_cmd_result} -ne 0 ]]; then gem_log_v_Debug "gem_script_cd(): Failed to change to directory.\n\tCommand line line:   ${gem_cmd_line}.\n\tError code:     ${gem_cmd_result}\n\tCommand output: ${gem_cmd_output}"; return 1; fi

	return 0
}

function gem_script_cp
{
	local gem_result
	if ! gem_result=$(gem_script_ValidatePaths "${@}"); then gem_log_v_Debug "gem_script_cp(): gem_script_ValidatePaths() failed."; return 1; fi
	if [[ ${gem_result} == "false" ]]; then gem_log_v_Debug "gem_script_cp(): Invalid arguments provided."; return 1; fi

	local gem_cmd_line="cp ${*}"

	local gem_cmd_output
	gem_cmd_output=$(${gem_cmd_line} 2>&1); gem_cmd_result=$? 
	if [[ ${gem_cmd_result} -ne 0 ]]; then gem_log_v_Debug "gem_script_cp(): Failed to copy file(s).\n\tCommand line:   ${gem_cmd_line}.\n\tError code:     ${gem_cmd_result}\n\tCommand output: ${gem_cmd_output}"; return 1; fi

	return 0
}

function gem_script_ln
{
	# ln creates a link to the first file from the second.
	local gem_result
	if ! gem_result=$(gem_script_ValidatePaths "${@}"); then gem_log_v_Debug "gem_script_ln(): gem_script_ValidatePaths() failed."; return 1; fi
	if [[ ${gem_result} == "false" ]]; then gem_log_v_Debug "gem_script_ln(): Invalid arguments provided."; return 1; fi

	local gem_cmd_line="ln -f ${*}"

	local gem_cmd_output
	gem_cmd_output=$(${gem_cmd_line} 2>&1); gem_cmd_result=$? 
	if [[ ${gem_cmd_result} -ne 0 ]]; then gem_log_v_Debug "gem_script_ln (): Failed to create a symbolic link.\n\tCommand line:   ${gem_cmd_line}.\n\tError code:     ${gem_cmd_result}\n\tCommand output: ${gem_cmd_output}"; return 1; fi

	return 0
}

function gem_script_mv
{
	local gem_result
	if ! gem_result=$(gem_script_ValidatePaths "${@}"); then gem_log_v_Debug "gem_script_mv(): gem_script_ValidatePaths() failed."; return 1; fi
	if [[ ${gem_result} == "false" ]]; then gem_log_v_Debug "gem_script_mv(): Invalid arguments provided."; return 1; fi

	local gem_cmd_line="mv ${*}"

	local gem_cmd_output
	gem_cmd_output=$(${gem_cmd_line} 2>&1); gem_cmd_result=$? 
	if [[ ${gem_cmd_result} -ne 0 ]]; then gem_log_v_Debug "gem_script_mv failed to move file(s).\n\tCommand line:   ${gem_cmd_line}.\n\tError code:     ${gem_cmd_result}\n\tCommand output: ${gem_cmd_output}"; return 1; fi

	return 0
}

function gem_script_rm
{
	local gem_result
	if ! gem_result=$(gem_script_ValidatePaths "${@}"); then gem_log_v_Debug "gem_script_rm(): gem_script_ValidatePaths() failed."; return 1; fi
	if [[ ${gem_result} == "false" ]]; then gem_log_v_Debug "gem_script_rm(): Invalid arguments provided."; return 1; fi

	local gem_cmd_line="rm ${*}"

	local gem_cmd_output
	gem_cmd_output=$(${gem_cmd_line} 2>&1); gem_cmd_result=$? 
	if [[ ${gem_cmd_result} -ne 0 ]]; then gem_log_v_Debug "gem_script_rm(): Failed to remove file(s).\n\tCommand line:   ${gem_cmd_line}.\n\tError code:     ${gem_cmd_result}\n\tCommand output: ${gem_cmd_output}"; return 1; fi

	return 0
}

function gem_script_mkdir
{
	local gem_result
	if ! gem_result=$(gem_script_ValidatePaths "${@}"); then gem_log_v_Debug "gem_script_mkdir(): gem_script_ValidatePaths() failed."; return 1; fi
	if [[ ${gem_result} == "false" ]]; then gem_log_v_Debug "gem_script_mkdir(): Invalid arguments provided."; return 1; fi

	local gem_cmd_line="mkdir ${*}"

	local gem_cmd_output
	gem_cmd_output=$(${gem_cmd_line} 2>&1); gem_cmd_result=$? 
	if [[ ${gem_cmd_result} -ne 0 ]]; then gem_log_v_Debug "gem_script_mkdir failed to create directory.\n\tCommand line:   ${gem_cmd_line}.\n\tError code:     ${gem_cmd_result}\n\tCommand output: ${gem_cmd_output}"; return 1; fi

	return 0
}

function gem_script_rmdir
{
	local gem_result
	if ! gem_result=$(gem_script_ValidatePaths "${@}"); then gem_log_v_Debug "gem_script_rmdir(): gem_script_ValidatePaths() failed."; return 1; fi
	if [[ ${gem_result} == "false" ]]; then gem_log_v_Debug "gem_script_rmdir(): Invalid arguments provided."; return 1; fi

	local gem_cmd_line="rmdir ${*}"

	local gem_cmd_output
	gem_cmd_output=$(${gem_cmd_line} 2>&1); gem_cmd_result=$? 
	if [[ ${gem_cmd_result} -ne 0 ]]; then gem_log_v_Debug "gem_script_rmdir() failed to remove directory.\n\tCommand line:   ${gem_cmd_line}.\n\tError code:     ${gem_cmd_result}\n\tCommand output: ${gem_cmd_output}"; return 1; fi

	return 0
}


# Echos "true" if the directory parameter is a directory.  Echos "false",
# otherwise.
function gem_script_DirExists
{
	local gem_path=${1}
	if [[ -n ${gem_path} && -d ${gem_path} ]]; then
		echo "true"
	else
		echo "false"
	fi
	return 0
}

# Echos "true" if the directory parameter is not a valid directory, or the
# directory does exist and is empty.  Echos "false", otherwise.
function gem_script_DirIsEmpty
{
	local gem_path=${1}
	local gem_dir_exists

	if ! gem_dir_exists=$(gem_script_DirExists "${gem_path}"); then gem_log_v_Debug "ERROR: gem_script_DirIsEmpty(): gem_script_DirExists() failed."; return 1; fi
	if [[ ${gem_dir_exists} == "true" && ! $(ls -A "${gem_path}") ]]; then
		echo "true"
	else
		echo "false"
	fi
	return 0
}

function gem_script_rmdir_IfEmpty
{
	local gem_result
	if ! gem_result=$(gem_script_ValidatePaths "${@}"); then gem_log_v_Debug "ERROR: gem_script_rmdir_IfEmpty(): gem_script_ValidatePaths() failed."; return 1; fi

	local gem_path=${1}
	local gem_dir_is_empty
	if ! gem_dir_is_empty=$(gem_script_DirIsEmpty "${gem_path}"); then gem_log_v_Debug "ERROR: gem_script_rmdir_IfEmpty(): gem_script_DirIsEmpty() failed."; return 1; fi

	if [[ ${gem_dir_is_empty} == "true" ]] && ! gem_script_rmdir "${gem_path}"; then gem_log_v_Debug "gem_script_rmdir_IfEmpty(): gem_script_rmdir() failed to remove directory: ${gem_path}"; return 1; fi

	return 0
}

# ==============================================================================
# gem_script_GlobalsDeclare()- 
# ==============================================================================
function gem_script_GlobalsDeclare
{
	if [[ -n ${gem_script_globals_var_list} ]]; then
		gem_script_globals_var_list="${gem_script_globals_var_list},"
	fi
	gem_script_globals_var_list="${gem_script_globals_var_list}${1}"

	local gem_ifs_saved=${IFS}
	IFS=","
	for var in ${1}; do
		eval "export $var"
	done
	IFS=${gem_ifs_saved}

	return 0
}

# ==============================================================================
# gem_script_GlobalsSave()- Echos a delmited list of key value pairs.
#
# A string with gem_script_globals_delimiter=<GEM> would be formed:
#
# aaaa<GEM>1111<GEM>bbbb<GEM>2222<GEM>
#
# ==============================================================================
function gem_script_GlobalsSave
{
	local gem_ifs_saved=${IFS}
	IFS=","
	local vars=""
	for var in ${gem_script_globals_var_list}; do
		vars="${vars}${var}${gem_script_globals_delimiter}${!var}${gem_script_globals_delimiter}"
	done
	IFS=${gem_ifs_saved}
	echo "${vars}"
	return 0
}

# ==============================================================================
# gem_script_GlobalsLoad()- Reads a delmited list of key value pairs from
# string $1.
#
# A string with gem_script_globals_delimiter=<GEM> would be formed:
#
# aaaa<GEM>1111<GEM>bbbb<GEM>2222<GEM>
#
# ==============================================================================
function gem_script_GlobalsLoad
{
	local str=${1}
	while [[ $str ]]; do
		lvalue="${str%%"$gem_script_globals_delimiter"*}"
		str=${str#*"$gem_script_globals_delimiter"}
		rvalue=${str%%"$gem_script_globals_delimiter"*}
		eval "${lvalue}=${rvalue}"
		str=${str#*"$gem_script_globals_delimiter"}
	done
	return 0
}

function gem_script_v_PrintHelp { gem_script_PrintHelp "$@"; return $? ; }
function gem_script_PrintHelp
{
	if [[ $# -gt 1 ]]; then
		gem_log_v_Msg "\n${*}\n\n"
	fi
	return 0
}

# ==============================================================================
# gem_script_v_Init()- 
#
# ==============================================================================
function gem_script_v_Init { gem_script_Init "$@"; return $?; }
function gem_script_Init
{
	gem_script_GlobalsDeclare "gem_script_OnArg_num_handled"

	if ! gem_log_Init; then gem_log_v_Debug "gem_script_Main(): gem_log_Init() failed."; return 1; fi

	return 0
}

# ==============================================================================
# gem_script_v_Clean()- 
#
# ==============================================================================
function gem_script_v_Clean { gem_script_Clean "$@"; return $?; }
function gem_script_Clean
{
	gem_log_Clean
	return $?
}

# ==============================================================================
# gem_script_v_OnArg()- Processes recognized arguments, and returns the number
# of arguments processed.
#
# We not currently handling any arguments here, but derrived scripts should
# always call gem_script_v_OnArg() in case we handle arguments in the future.
# ==============================================================================
function gem_script_v_OnArg
{
	local gem_return=0
	local num_args_handled_here=0

	local arg=${1}
	local globals;
	globals=$(gem_script_OnArg "${arg}"); gem_result_OnArg=$?; gem_script_GlobalsLoad "${globals}"
	echo $((num_args_handled_here + gem_script_OnArg_num_handled_there))
	gem_script_GlobalsSave
	return ${gem_result_OnArg}
}

function gem_script_OnArg
{
	local gem_return=0
	gem_script_OnArg_num_handled=0
#	local arg=${1}
#	case ${arg} in
#	*)
#	esac
	gem_script_GlobalsSave
	return ${gem_return}
}

# ==============================================================================
# gem_script_v_Main()
# ==============================================================================
function gem_script_v_Main { gem_script_Main "$@"; return $? ; }
function gem_script_Main
{
	# echo "+++ gem_script::gem_script_Main()"
	local gem_result_OnArg

	while [[ $# -gt 0 ]]
	do
		arg=$(echo "${@}" | tr '[:upper:]' '[:lower:]')	# Lowercase the argument.

		if ! gem_log_v_ConsoleEnablePush false; then gem_log_v_Debug "gem_script_Main(): gem_log_v_ConsoleEnablePush() failed."; return 1; fi

		gem_script_OnArg_num_handled=0
		local globals;
		globals=$(gem_script_v_OnArg "${arg}"); gem_result_OnArg=$?; gem_script_GlobalsLoad "${globals}";

		if ! gem_log_v_ConsoleEnablePop; then gem_log_v_Msg "gem_script_Main(): gem_log_v_ConsoleEnablePop() failed."; return 1; fi

		if [[ ${gem_result_OnArg} -ne 0 ]]; then gem_log_v_Msg "gem_script_Main(): gem_script_v_OnArg() failed."; return 1; fi

		if [[ ${gem_script_OnArg_num_handled} -eq 0 ]]; then gem_log_v_Msg "ERROR: gem_script_Main() encountered an unrecognized argument: ${1}"; return 1; fi

		for (( i=0; i < gem_script_OnArg_num_handled; i++ )) do shift ; done
	done

	return 0
}

