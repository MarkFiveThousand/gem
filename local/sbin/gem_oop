#!/bin/bash
#  ___________                           __________
# /\   _______\                         /\   ______\
# \ \  \______/_     ___   ____ ____ ___\ \  \_____/_     ___   ___ ___  ______   ____    ___
#  \ \  \ /\__  \  /'___`\/\   V    V   \\ \_______  \  /'   `\/\  \\  \/\   __\/' ._`\ /'___`\
#   \ \  \\/__\  \/\  ___/\ \  \/\  \/\  \\/_______\  \/\  \\  \ \  \\  \ \  \ /\  \__//\  ___/
#    \ \__________\ \____\ \ \__\ \__\ \__\ /\_________\ \_____/\ \______\ \__\\ \____/\ \____\
#     \/__________/\/____/  \/__/\/__/\/__/ \/_________/\/____/  \/______/\/__/ \/___/  \/____/


# Here's another resource that includes a notion of inheritance.  It would be
# nice to merge the two.
# http://hipersayanx.blogspot.com/2012/12/object-oriented-programming-in-bash.html


# ---------------------------------------------------------------------------
# OO support functions
# Kludged by Pim van Riezen <pi@madscience.nl>
# ---------------------------------------------------------------------------
DEFCLASS=""
CLASS=""
THIS=0

# Begin class definition mode.  $DEFCLASS stores the class name for use by
# func() and var() functions as member functions and variables are defined.
#
# Example usage:
#
# class Storpel
#    func Storpel
#    func setName
#    func setQuality
#    func print
#    var name
#    var quality
#
function class()
{
	DEFCLASS="$1"
	eval CLASS_${DEFCLASS}_VARS=""
	eval CLASS_${DEFCLASS}_FUNCTIONS=""
}

# I'm not sure what the purpose of this function is.
function static()
{
	return 0
}

# Adds a function to the most recent class declared using the class() function.
# Used during class definition.  $1 gets appended to a space separated list.
#
# class Foo
# func a
# func b
# 
#... creates the global variable CLASS_Foo_FUNCTIONS equal to "a b"
function func()
{
	local varname="CLASS_${DEFCLASS}_FUNCTIONS"
	eval "$varname=\"\${$varname}$1 \""
#echo "func(): varname=$varname"
}

# Adds a variable to the most recent class declared using the class() function.
# Used during class definition.  $1 gets appended to a space separated list.
#
# class Foo
# var a
# var b
# 
#... creates the global variable CLASS_Foo_VARS equal to "a b"
function var()
{
	local varname="CLASS_${DEFCLASS}_VARS"
	eval $varname="\"\${$varname}$1 \""
}

# =============================================================================
#                       new() and new() Helper Functions
# =============================================================================
function savevar()
{
	eval "varlist=\"\$CLASS_${CLASS}_VARS\""
	for var in $varlist; do
		eval "INSTANCE_${THIS}_$var=\"\$$var\""
	done
}

function loadvar()
{
	eval "varlist=\"\$CLASS_${CLASS}_VARS\""
	for var in $varlist; do
		eval "$var=\"\$INSTANCE_${THIS}_$var\""
	done
}

function loadfunc()
{
	eval "funclist=\"\$CLASS_${CLASS}_FUNCTIONS\""
#	echo "funclist=$funclist";exit
	for func in $funclist; do
#		echo "$func() { ${CLASS}::${func}() }"
		eval "${func}() { ${CLASS}::${func} \"\$*\"; return \$?; }"
	done
}

function typeof()
{
	eval echo \$TYPEOF_$1
}

# Instanciates a class of name $1.
#
# Generates the following variables.  For example:
#
# TYPEOF_c058cb50b40b4eef90ce810708df745e=MyClass
#
# Each member function will produce code like to following:
# a.Foo ()
# {
#	local t=$THIS;
#	THIS=83b17912447c4eb1b6f5ad8b8cc5ab2d;
#	local c=$CLASS;
#	CLASS=MyClass;
#	loadvar;
#	loadfunc;
#	MyClass::Foo "$*";
#	rt=$?;
#	savevar;
#	CLASS=$c;
#	THIS=$t;
#	return $rt
#}

function new()
{
	local class="$1"
	local cvar="$2"		# $cvar is the instance variable being created
#echo "class=$class, cvar=$cvar";exit
	shift
	shift
	# id is a unique identifier specific to this class (e.g. c058cb50b40b4eef90ce810708df745e)
	local id=$(uuidgen | tr A-F a-f | sed -e "s/-//g")
	eval TYPEOF_${id}=$class
	eval $cvar=$id
#	echo "$cvar=$id"
	local funclist
	eval "funclist=\"\$CLASS_${class}_FUNCTIONS\""
#	echo "funclist=$funclist";exit
	for func in $funclist; do
#		echo "${cvar}.${func}"
		eval "${cvar}.${func}() { local t=\$THIS; THIS=$id; local c=\$CLASS; CLASS=$class; loadvar; loadfunc; ${class}::${func} \"\$*\"; rt=\$?; savevar; CLASS=\$c; THIS=\$t; return \$rt; }"
	done
	# Call the consturctor
	eval "${cvar}.${class} \"\$*\" || true"
}


# ---------------------------------------------------------------------------
# Example code
# ---------------------------------------------------------------------------

if [[ 0 == 1 ]]; then

	# class definition
	class Storpel
		func Storpel
		func setName
		func setQuality
		func print
		var name
		var quality


	# class implementation
	Storpel::Storpel()
	{
		setName "$1"
		setQuality "$2"
		if [ -z "$name" ]; then setName "Generic"; fi
		if [ -z "$quality" ]; then setQuality "Normal"; fi
	}

	Storpel::setName()
	{ name="$1"; }
	Storpel::setQuality()
	{ quality="$1"; }
	Storpel::print()
	{ echo "$name ($quality)"; }

	# usage
	new Storpel one "Storpilator 1000" Medium
	new Storpel two
	new Storpel three

	two.setName "Storpilator 2000"
	two.setQuality "Strong"

	one.print
	two.print
	three.print

	echo "one: $one ($(typeof $one))"
	echo "two: $two ($(typeof $two))"
	echo "three: $three ($(typeof $two))"
fi

